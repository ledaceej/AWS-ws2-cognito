[
{
	"uri": "//localhost:1313/8-api/8.1-apifindflight/",
	"title": "API find flight",
	"tags": [],
	"description": "",
	"content": "Diagram API Content Write API Test API "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction some Amazon Service In this workshop, we will build microservice Java springboot application. And this workshop not only instruct to build application but also lets you integrate with multi AWS service to test the application end to end.\nThere are some service you will you to complete this workshop, that are Cognito, Simple Notification Service, Secrete Manager\nSecrete Manager helps you manage, retrive, and rotate database credentials, API keys,\u0026hellip; throught out their lifecycles Cognito helps you implement customer identity and access management (CIAM) into your web and mobile application. You can quickly add user authentication and access control to your application in minutes Simple Notification Service sends notification in two way A2A and A2P. A2A provides high throughput, push-based, many to many messaging between distributed system, microservices, and event-driven serverless applications. A2P fucntionality lets you send messages to customer with SMS text, push notifications and email In the following sections, we will delve into the fundamental concepts of microservice application and integrate AWS service.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Start with Cognito, SNS, Secrete",
	"tags": [],
	"description": "",
	"content": "Java application with Amazon Service Overview In this workshop, you will learn how to build cloud native enterprise Java application and combine some Amazon Service like Cognito, SNS, Secretes Manager\nContent Introduction Cloudformation Connect to EC2 Setting Cognito Configure SNS topic Configure DB Configure Intellij API Resource Cleanup "
},
{
	"uri": "//localhost:1313/8-api/8.1-apifindflight/8.1.1-writeapi/",
	"title": "Write API",
	"tags": [],
	"description": "",
	"content": "Write API You will create model classes to work with airport and flight table. Open Airport.java add the following code package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport lombok.NoArgsConstructor;\rimport javax.persistence.*;\r/* Create an Entity class Airport mapped to table airport with following 4 attributes:\rairportCode as id, airportName, airportCity and airportLocale.\rThey should be mapped to database columns with _ as separator.*/\r@Entity\r@Table(name = \u0026#34;airport\u0026#34;)\r@Accessors(chain = true)\r@NoArgsConstructor\rpublic class Airport {\rpublic String getAirportCode() {\rreturn airportCode;\r}\rpublic void setAirportCode(String airportCode) {\rthis.airportCode = airportCode;\r}\rpublic String getAirportName() {\rreturn airportName;\r}\rpublic void setAirportName(String airportName) {\rthis.airportName = airportName;\r}\rpublic String getAirportCity() {\rreturn airportCity;\r}\rpublic void setAirportCity(String airportCity) {\rthis.airportCity = airportCity;\r}\rpublic String getAirportLocale() {\rreturn airportLocale;\r}\rpublic void setAirportLocale(String airportLocale) {\rthis.airportLocale = airportLocale;\r}\r@Id\r@Column(name = \u0026#34;airport_code\u0026#34;)\rprivate String airportCode;\r@Column(name = \u0026#34;airport_name\u0026#34;)\rprivate String airportName;\r@Column(name = \u0026#34;airport_city\u0026#34;)\rprivate String airportCity;\r@Column(name = \u0026#34;airport_locale\u0026#34;)\rprivate String airportLocale;\r} Open Flight.java add the following code Create Data Transfer Object(DTO) to combine the information from flight and airport tables Open FlightDetails.java add the following code package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport lombok.NoArgsConstructor;\rimport javax.persistence.*;\r@Entity\r@Table(name = \u0026#34;flight\u0026#34;)\r@Accessors(chain = true)\r@NoArgsConstructor\rpublic class Flight {\r@Id\r@GeneratedValue(strategy = GenerationType.IDENTITY)\r@Column(name = \u0026#34;id\u0026#34;)\rprivate int id;\rpublic int getId() {\rreturn id;\r}\rpublic void setId(int id) {\rthis.id = id;\r}\rpublic String getDepartureDate() {\rreturn departureDate;\r}\rpublic void setDepartureDate(String departureDate) {\rthis.departureDate = departureDate;\r}\rpublic String getDepartureTime() {\rreturn departureTime;\r}\rpublic void setDepartureTime(String departureTime) {\rthis.departureTime = departureTime;\r}\rpublic String getDepartureAirportCode() {\rreturn departureAirportCode;\r}\rpublic void setDepartureAirportCode(String departureAirportCode) {\rthis.departureAirportCode = departureAirportCode;\r}\rpublic String getArrivalDate() {\rreturn arrivalDate;\r}\rpublic void setArrivalDate(String arrivalDate) {\rthis.arrivalDate = arrivalDate;\r}\rpublic String getArrivalTime() {\rreturn arrivalTime;\r}\rpublic void setArrivalTime(String arrivalTime) {\rthis.arrivalTime = arrivalTime;\r}\rpublic String getArrivalAirportCode() {\rreturn arrivalAirportCode;\r}\rpublic void setArrivalAirportCode(String arrivalAirportCode) {\rthis.arrivalAirportCode = arrivalAirportCode;\r}\rpublic String getFlightNumber() {\rreturn flightNumber;\r}\rpublic void setFlightNumber(String flightNumber) {\rthis.flightNumber = flightNumber;\r}\rpublic String getFlightDuration() {\rreturn flightDuration;\r}\rpublic void setFlightDuration(String flightDuration) {\rthis.flightDuration = flightDuration;\r}\rpublic double getTicketPrice() {\rreturn ticketPrice;\r}\rpublic void setTicketPrice(double ticketPrice) {\rthis.ticketPrice = ticketPrice;\r}\rpublic String getTicketCurrency() {\rreturn ticketCurrency;\r}\rpublic void setTicketCurrency(String ticketCurrency) {\rthis.ticketCurrency = ticketCurrency;\r}\rpublic int getSeatCapacity() {\rreturn seatCapacity;\r}\rpublic void setSeatCapacity(int seatCapacity) {\rthis.seatCapacity = seatCapacity;\r}\rpublic int getSeatAvailable() {\rreturn seatAvailable;\r}\rpublic void setSeatAvailable(int seatAvailable) {\rthis.seatAvailable = seatAvailable;\r}\r@Column(name = \u0026#34;departure_date\u0026#34;)\rprivate String departureDate;\r@Column(name = \u0026#34;departure_time\u0026#34;)\rprivate String departureTime;\r@Column(name = \u0026#34;departure_airport_code\u0026#34;)\rprivate String departureAirportCode;\r@Column(name = \u0026#34;arrival_date\u0026#34;)\rprivate String arrivalDate;\r@Column(name = \u0026#34;arrival_time\u0026#34;)\rprivate String arrivalTime;\r@Column(name = \u0026#34;arrival_airport_code\u0026#34;)\rprivate String arrivalAirportCode;\r@Column(name = \u0026#34;flight_number\u0026#34;)\rprivate String flightNumber;\r@Column(name = \u0026#34;flight_duration\u0026#34;)\rprivate String flightDuration;\r@Column(name = \u0026#34;ticket_price\u0026#34;)\rprivate double ticketPrice;\r@Column(name = \u0026#34;ticket_currency\u0026#34;)\rprivate String ticketCurrency;\r@Column(name = \u0026#34;seat_capacity\u0026#34;)\rprivate int seatCapacity;\r@Column(name = \u0026#34;seat_available\u0026#34;)\rprivate int seatAvailable;\r@Override\rpublic String toString() {\rreturn \u0026#34;Flight{\u0026#34; +\r\u0026#34;id=\u0026#34; + id +\r\u0026#34;, departureDate=\u0026#39;\u0026#34; + departureDate + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, departureTime=\u0026#39;\u0026#34; + departureTime + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, departureAirportCode=\u0026#39;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, arrivalDate=\u0026#39;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, arrivalTime=\u0026#39;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, arrivalAirportCode=\u0026#39;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, flightNumber=\u0026#39;\u0026#34; + flightNumber + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, flightDuration=\u0026#39;\u0026#34; + flightDuration + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, ticketPrice=\u0026#34; + ticketPrice +\r\u0026#34;, ticketCurrency=\u0026#39;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, seatCapacity=\u0026#34; + seatCapacity +\r\u0026#34;, seatAvailable=\u0026#34; + seatAvailable +\r\u0026#39;}\u0026#39;;\r}\rpublic String toJson() {\rreturn \u0026#34;{\u0026#34; +\r\u0026#34;\\\u0026#34;id\\\u0026#34;:\u0026#34; + id +\r\u0026#34;, \\\u0026#34;departureDate\\\u0026#34;:\\\u0026#34;\u0026#34; + departureDate + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;departureTime\\\u0026#34;:\\\u0026#34;\u0026#34; + departureTime + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;departureAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;arrivalDate\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;arrivalTime\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;arrivalAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;flightNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + flightNumber + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;flightDuration\\\u0026#34;:\\\u0026#34;\u0026#34; + flightDuration + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\u0026#34; + ticketPrice +\r\u0026#34;, \\\u0026#34;ticketCurrency\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;seatCapacity\\\u0026#34;:\u0026#34; + seatCapacity +\r\u0026#34;, \\\u0026#34;seatAvailable\\\u0026#34;:\u0026#34; + seatAvailable +\r\u0026#39;}\u0026#39;;\r}\r} Build JPA Repository Interface to access data from MySQL tables Open AirportRepository.java add the following code package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Airport;\rimport org.springframework.stereotype.Repository;\rimport org.springframework.data.jpa.repository.JpaRepository;\r@Repository\rpublic interface AirportRepository extends JpaRepository\u0026lt;Airport, String\u0026gt; {\rAirport findByAirportCode(String airportCode);\r} Open FlightRepository.java add the following code package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Flight;\rimport org.springframework.stereotype.Repository;\rimport org.springframework.data.jpa.repository.JpaRepository;\r@Repository\rpublic interface FlightRepository extends JpaRepository\u0026lt;Flight, Integer\u0026gt; {\rIterable\u0026lt;Flight\u0026gt; findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(String departureDate, String departureAirportCode, String arrivalAirportCode);\rFlight findById(int id);\r} Build a Configuration Class to dynamically configure database credentials from AWS Secrets Manager. Open DataSourceConfig.java add the following code package com.airlines.catalog.config;\rimport com.fasterxml.jackson.core.JsonProcessingException;\rimport org.springframework.beans.factory.annotation.Value;\rimport org.springframework.context.annotation.Bean;\rimport org.springframework.context.annotation.Configuration;\rimport software.amazon.awssdk.regions.Region;\rimport software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;\rimport software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;\rimport software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;\rimport software.amazon.awssdk.services.secretsmanager.model.SecretsManagerException;\rimport org.springframework.boot.jdbc.DataSourceBuilder;\rimport com.fasterxml.jackson.core.JsonParser;\rimport com.fasterxml.jackson.databind.JsonNode;\rimport com.fasterxml.jackson.databind.ObjectMapper;\rimport javax.sql.DataSource;\r/*Create public class DataSourceConfig and 2 member variables awsRegion and secretName.\rAutowire these variables with aws.region and secretmanager.key from application.properties file.\r*/\r@Configuration\rpublic class DataSourceConfig {\r@Value(\u0026#34;${aws.region}\u0026#34;)\rprivate String awsRegion;\r@Value(\u0026#34;${secretmanager.key}\u0026#34;)\rprivate String secretName;\r/* Create a private getSecret method that connects to AWS Secrets Manager and gets the secret string using\rmember variables awsRegion and secretName. Catch and throw Secret Manager exceptions */\rprivate String getSecret() {\rRegion region = Region.of(awsRegion);\rSecretsManagerClient client = SecretsManagerClient.builder()\r.region(region)\r.build();\rGetSecretValueRequest valueRequest = GetSecretValueRequest.builder()\r.secretId(secretName)\r.build();\rGetSecretValueResponse valueResponse = client.getSecretValue(valueRequest);\rreturn valueResponse.secretString();\r}\r/* Create a method getDataSource to build the datasource object.\rCall the getSecret function. Parse the returned JSON string to extract host, port, db,\rusername and password. Then configure the mysql url, username and password of the datasource object.\rReturn the datasource object. Throw any Json Processing exception.\r*/\r@Bean\rpublic DataSource getDataSource() throws JsonProcessingException {\rDataSourceBuilder\u0026lt;?\u0026gt; dataSourceBuilder = DataSourceBuilder.create();\rString secret = getSecret();\rObjectMapper objectMapper = new ObjectMapper();\robjectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\rJsonNode jsonNode = objectMapper.readTree(secret);\rString host = jsonNode.get(\u0026#34;host\u0026#34;).asText();\rint port = jsonNode.get(\u0026#34;port\u0026#34;).asInt();\rString db = jsonNode.get(\u0026#34;db\u0026#34;).asText();\rString username = jsonNode.get(\u0026#34;username\u0026#34;).asText();\rString password = jsonNode.get(\u0026#34;password\u0026#34;).asText();\rdataSourceBuilder.url(\u0026#34;jdbc:mysql://\u0026#34; + host + \u0026#34;:\u0026#34; + port + \u0026#34;/\u0026#34; + db);\rdataSourceBuilder.username(username);\rdataSourceBuilder.password(password);\rreturn dataSourceBuilder.build();\r}\r} Build the service class that will fetch the data from flight table to get available flights based on input parameters Open FlightDetailsService.java add the following code package com.airlines.catalog.service;\rimport com.airlines.catalog.dto.FlightDetails;\rimport com.airlines.catalog.model.Airport;\rimport com.airlines.catalog.model.Flight;\rimport com.airlines.catalog.repository.AirportRepository;\rimport com.airlines.catalog.repository.FlightRepository;\rimport org.springframework.beans.factory.annotation.Autowired;\rimport org.springframework.stereotype.Service;\rimport java.util.ArrayList;\rimport java.util.List;\r/* Create FlightDetailsService class */\r@Service\rpublic class FlightDetailsService {\r@Autowired\rFlightRepository flightRepository;\r@Autowired\rAirportRepository airportRepository;\r/* Create private method populateFlightDetails method which takes flight, arrival airport and departure airport\ras input parameters and returns flightDetails object. */\rprivate FlightDetails populateFlightDetails(Flight flight, Airport arrivalAirport, Airport departureAirport) {\r/* Match and Assign all the attributes from flight, arrivalAirport and departureAirport object\rto flightDetails object. */\rFlightDetails flightDetails = new FlightDetails();\rflightDetails.setFlightId(flight.getId());\rflightDetails.setDepartureDate(flight.getDepartureDate());\rflightDetails.setDepartureTime(flight.getDepartureTime());\rflightDetails.setArrivalDate(flight.getArrivalDate());\rflightDetails.setArrivalTime(flight.getArrivalTime());\rflightDetails.setArrivalAirportCode(arrivalAirport.getAirportCode());\rflightDetails.setArrivalAirportName(arrivalAirport.getAirportName());\rflightDetails.setArrivalAirportCity(arrivalAirport.getAirportCity());\rflightDetails.setArrivalAirportLocale(arrivalAirport.getAirportLocale());\rflightDetails.setDepartureAirportCode(departureAirport.getAirportCode());\rflightDetails.setDepartureAirportName(departureAirport.getAirportName());\rflightDetails.setDepartureAirportCity(departureAirport.getAirportCity());\rflightDetails.setDepartureAirportLocale(departureAirport.getAirportLocale());\rflightDetails.setFlightDuration(flight.getFlightDuration());\rflightDetails.setTicketPrice(flight.getTicketPrice());\rflightDetails.setTicketCurrency(flight.getTicketCurrency());\rflightDetails.setSeatAvailable(flight.getSeatAvailable());\rflightDetails.setFlightNumber(flight.getFlightNumber());\rreturn flightDetails;\r}\rpublic List\u0026lt;FlightDetails\u0026gt; findFlights(String departureDate, String departureAirportCode,\rString arrivalAirportCode, FlightRepository flightRepository,\rAirportRepository airportRepository) {\rIterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode);\rList\u0026lt;FlightDetails\u0026gt; flightDetailsList = new ArrayList\u0026lt;\u0026gt;();\rfor (Flight flight : flights) {\rAirport departureAirport = airportRepository.findByAirportCode(flight.getDepartureAirportCode());\rAirport arrivalAirport = airportRepository.findByAirportCode(flight.getArrivalAirportCode());\rFlightDetails flightDetails = populateFlightDetails(flight, arrivalAirport, departureAirport);\rflightDetailsList.add(flightDetails);\r}\rreturn flightDetailsList;\r}\r} Build the RSA Key provider class to get the Cognito public key. This will be used to verify the JWT Token later. Open AwsCognitoRSAKeyProvider.java add the following code package com.airlines.catalog.controller;\rimport com.auth0.jwk.JwkException;\rimport com.auth0.jwk.JwkProvider;\rimport com.auth0.jwk.JwkProviderBuilder;\rimport com.auth0.jwt.interfaces.RSAKeyProvider;\rimport java.net.MalformedURLException;\rimport java.net.URL;\rimport java.security.interfaces.RSAPrivateKey;\rimport java.security.interfaces.RSAPublicKey;\r/* create a class to implement methods for public key verification.\rURL is provided as input\rAdd other mandatory methods to implement the interface. Handle all the exceptions.\r*/\rpublic class AwsCognitoRSAKeyProvider implements RSAKeyProvider {\rprivate final JwkProvider provider;\rpublic AwsCognitoRSAKeyProvider(String url) throws MalformedURLException {\rprovider = new JwkProviderBuilder(new URL(url)).build();\r}\r@Override\rpublic RSAPublicKey getPublicKeyById(String kid) {\rtry {\rreturn (RSAPublicKey) provider.get(kid).getPublicKey();\r} catch (JwkException e) {\re.printStackTrace();\r}\rreturn null;\r}\r@Override\rpublic RSAPrivateKey getPrivateKey() {\rreturn null;\r}\r@Override\rpublic String getPrivateKeyId() {\rreturn null;\r}\r} Build the exception handler to handle Cognito authentication errors and define custom application messages for few commonly encountered exceptions. Open AuthenticationException.java add the following code package com.airlines.catalog.exception;\rimport com.auth0.jwt.exceptions.InvalidClaimException;\rimport com.auth0.jwt.exceptions.JWTDecodeException;\rimport com.auth0.jwt.exceptions.TokenExpiredException;\rimport java.net.CacheRequest;\rimport java.net.MalformedURLException;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport lombok.Getter;\r/*Create a public class AuthenticationException that extends Runtime Exception with member variable\rresponse entity and constructor with Exception as input parameter.\rCheck for different types of JWT exceptions\rStore the message in member variable response entity.\r*/\r@Getter\rpublic class AuthenticationException extends RuntimeException {\rprivate ResponseEntity responseEntity;\rpublic AuthenticationException(Exception e) {\rif (e instanceof JWTDecodeException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Token\u0026#34;, HttpStatus.UNAUTHORIZED);\r} else if (e instanceof TokenExpiredException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Token Expired\u0026#34;, HttpStatus.UNAUTHORIZED);\r} else if (e instanceof InvalidClaimException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Claim\u0026#34;, HttpStatus.UNAUTHORIZED);\r} else if (e instanceof MalformedURLException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid URL\u0026#34;, HttpStatus.UNAUTHORIZED);\r}\r}\r} Build the controller class for exposing the \u0026ldquo;getFlightDetails\u0026rdquo; API CodeWhisperer prompts to build the API Controller: Open FlightReservation.java add the following code package com.airlines.catalog.controller;\rimport java.nio.channels.ScatteringByteChannel;\rimport java.util.List;\rimport com.airlines.catalog.dto.FlightDetails;\rimport com.airlines.catalog.exception.AuthenticationException;\rimport com.airlines.catalog.repository.AirportRepository;\rimport com.airlines.catalog.repository.FlightRepository;\rimport com.airlines.catalog.service.FlightDetailsService;\rimport com.auth0.jwt.JWT;\rimport com.auth0.jwt.JWTVerifier;\rimport com.auth0.jwt.algorithms.Algorithm;\rimport com.auth0.jwt.interfaces.DecodedJWT;\rimport org.springframework.beans.factory.annotation.Autowired;\rimport org.springframework.beans.factory.annotation.Value;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport org.springframework.web.bind.annotation.GetMapping;\rimport org.springframework.web.bind.annotation.RequestHeader;\rimport org.springframework.web.bind.annotation.RequestParam;\rimport org.springframework.web.bind.annotation.RestController;\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport com.airlines.catalog.service.FlightBooking;\rimport com.airlines.catalog.dto.ReservationDetails;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.web.bind.annotation.*;\rimport software.amazon.awssdk.regions.Region;\rimport javax.validation.Valid;\r@RestController\rpublic class FlightReservation {\r@Autowired\rFlightRepository flightresultsRepository;\r@Autowired\rAirportRepository airportresultsRepository;\r@Autowired\rFlightDetailsService FlightDetailsService;\r@Autowired\rPassengerRepository passengerRepository;\r@Autowired\rReservationRepository reservationRepository;\r@Autowired\rFlightBooking flightBooking;\r@Value(\u0026#34;${cognito.userpool.id}\u0026#34;)\rprivate String cognitoUserPoolId;\r@Value(\u0026#34;${aws.region}\u0026#34;)\rprivate String awsRegion;\r@Value(\u0026#34;${sns.arn}\u0026#34;)\rprivate String snsTopicArn;\r/* Create a private method verifyToken to verify JWT token with input parameters as\rCognito user pool id, AWS region and token string. Function returns a Boolean.\rConstruct the Cognito well known url and then verify the token using RSA Algorithm.\rcatch all Exception throw new authenticationException.*/\rprivate Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException {\rtry {\rSystem.out.println(\u0026#34;token=\u0026#34; + token);\rString cognitoWellKnownUrl = \u0026#34;https://\u0026#34;+ cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;;\rAlgorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl));\rJWTVerifier verifier = JWT.require(algorithm).build();\rDecodedJWT decodedJWT = verifier.verify(token);\rreturn true;\r} catch (Exception e) {\rthrow new AuthenticationException(e);\r}\r}\r/* Create a rest controller getFlightDetails to get flight details with HTTP GET Method ,\r/flight path and request parameters as departure date, departure airport code and arrival airport code\rJWT Token in the Authorization Header.\rRest controller returns a ResponseEntity of string.\r*/\r@GetMapping(\u0026#34;/flight\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate,\r@RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode,\r@RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException {\r/* Call verifyToken method, catch authentication exception and return the responseEntity\rif token is valid and call the findFlights method in FlightDetailsService class\rwith input parameters departure date, departure airport code,\rarrival airport code, flightResultsRepository and airportResultsRepository.\rIf flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;.\rIf authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden\r*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\rList\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository);\rif (flights.size() \u0026gt; 0) {\rreturn new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK);\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK);\r}\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN);\r}\r} catch (AuthenticationException e) {\rreturn e.getResponseEntity();\r}\r}\r/* Create a rest controller bookFlight to get flight details with HTTP POST Method ,\r/reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string.\rAuthorization token is passed in the header of the request.\r*/\r@PostMapping(\u0026#34;/reserve\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; bookFlight(@RequestBody @Valid ReservationDetails reservationDetails,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization)\rthrows AuthenticationException, FlightNotFoundException, RequestedSeatsNotAvailable {\rResponseEntity\u0026lt;String\u0026gt; responseEntity = null;\r/*validate the token by calling verifyToken method in a try catch block.\rCatch authenticationExceptionHandler exception return the response entity object\rfrom the exception object*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\r/* create passenger object assign first name, last name and gender of passenger object from reservationDetails object */\rPassenger passenger = new Passenger();\rpassenger.setFirstName(reservationDetails.getFirstName());\rpassenger.setLastName(reservationDetails.getLastName());\rpassenger.setGender(reservationDetails.getGender());\r//Check the age from reservationDetails object and populate adult field\rif (reservationDetails.getAge() \u0026gt;= 18) {\rpassenger.setAdult(true);\r}\r/* create reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail,\rcontactNumber, reservationStatus, paymentStatus, paymentMode */\rReservation reservation = new Reservation();\rreservation.setFlightId(reservationDetails.getFlightId());\rreservation.setTravelClass(reservationDetails.getTravelClass());\rreservation.setTicketPrice(reservationDetails.getTicketPrice());\rreservation.setCurrencyCode(reservationDetails.getCurrencyCode());\rreservation.setContactEmail(reservationDetails.getContactEmail());\rreservation.setContactNumber(reservationDetails.getContactNumber());\rreservation.setReservationStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentMode(\u0026#34;Cash\u0026#34;);\r/* set the date reservation date in yyyy-MM-dd format and\rreservation time in HH:mm:ss format for current date and time*/\rreservation.setReservationDate(java.time.LocalDate.now().toString());\rreservation.setReservationTime(java.time.LocalTime.now().toString());\rBoolean result;\rtry {\rint noOfPassengers = 1;\rRegion region = Region.of(awsRegion);\rresult = flightBooking.reserveFlight(passenger, reservation, passengerRepository,\rreservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region);\r}\rcatch (FlightNotFoundException e) {\rreturn e.getResponseEntity();\r}\rcatch (RequestedSeatsNotAvailable e) {\rreturn e.getResponseEntity();\r}\r/* check if the reservation is successful\rreturn response entity object with HTTP status of ok and\rmessage \u0026#34;reservation made successfully\u0026#34; appending the booking Reference\rif the reservation is not successful\rreturn response entity object with HTTP status of bad request */\rif (result) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation made successfully. Booking Reference: \u0026#34; + reservation.getBookingReference(), HttpStatus.OK);\r}\relse {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation failed\u0026#34;, HttpStatus.BAD_REQUEST);\r}\r}\r} catch (AuthenticationException e) {\rresponseEntity = e.getResponseEntity();\r}\rreturn responseEntity;\r}\r} "
},
{
	"uri": "//localhost:1313/8-api/8.2-apireserve/8.2.1-writeapi/",
	"title": "Write API",
	"tags": [],
	"description": "",
	"content": "Write API You will create model classes Open Passenger.java add the following code package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.NoArgsConstructor;\rimport lombok.experimental.Accessors;\rimport javax.persistence.*;\rimport javax.persistence.GenerationType;\r/* Build a Passenger Entity class with columns passengerId as Identity auto generated, adult, gender, firstName,\rlastName mapped to passenger table, column names sepetated by _*/\r@Getter\r@Setter\r@NoArgsConstructor\r@Accessors(chain = true)\r@Entity\r@Table(name = \u0026#34;passenger\u0026#34;)\rpublic class Passenger {\r@Id\r@GeneratedValue(strategy = GenerationType.IDENTITY)\r@Column(name = \u0026#34;passenger_id\u0026#34;)\rprivate int passengerId;\r@Column(name = \u0026#34;adult\u0026#34;)\rprivate boolean adult;\r@Column(name = \u0026#34;gender\u0026#34;)\rprivate String gender;\r@Column(name = \u0026#34;first_name\u0026#34;)\rprivate String firstName;\r@Column(name = \u0026#34;last_name\u0026#34;)\rprivate String lastName;\r//Create a tostring method to convert the object to string\r@Override\rpublic String toString() {\rreturn \u0026#34;Passenger{\u0026#34; +\r\u0026#34;passengerId=\u0026#34; + passengerId +\r\u0026#34;, adult=\u0026#34; + adult +\r\u0026#34;, gender=\u0026#39;\u0026#34; + gender + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, firstName=\u0026#39;\u0026#34; + firstName + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, lastName=\u0026#39;\u0026#34; + lastName + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\rpublic int getPassengerId() {\rreturn passengerId;\r}\rpublic void setPassengerId(int passengerId) {\rthis.passengerId = passengerId;\r}\rpublic boolean isAdult() {\rreturn adult;\r}\rpublic void setAdult(boolean adult) {\rthis.adult = adult;\r}\rpublic String getGender() {\rreturn gender;\r}\rpublic void setGender(String gender) {\rthis.gender = gender;\r}\rpublic String getFirstName() {\rreturn firstName;\r}\rpublic void setFirstName(String firstName) {\rthis.firstName = firstName;\r}\rpublic String getLastName() {\rreturn lastName;\r}\rpublic void setLastName(String lastName) {\rthis.lastName = lastName;\r}\r//Create a toJson method to convert the object to Json String\rpublic String toJson() {\rreturn \u0026#34;{\u0026#34; +\r\u0026#34;\\\u0026#34;passengerId\\\u0026#34;:\u0026#34; + passengerId +\r\u0026#34;, \\\u0026#34;adult\\\u0026#34;:\u0026#34; + adult +\r\u0026#34;, \\\u0026#34;gender\\\u0026#34;:\\\u0026#34;\u0026#34; + gender + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;firstName\\\u0026#34;:\\\u0026#34;\u0026#34; + firstName + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;lastName\\\u0026#34;:\\\u0026#34;\u0026#34; + lastName + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\r} Open Reservation.java add the following code package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.NoArgsConstructor;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport javax.persistence.*;\r/* Build a Reservation Entity class mapped to database table reservation\rAttributes for the class:\rbookingReference as long identity autogenerated,\rpassengerId, flightId, reservationDate, reservationTime,reservationStatus, travelClass,\rticketPrice as double, currencyCode, paymentStatus, paymentMode, contactNumber,\rcontactEmail mapped to column names seperated by _ */\r@Getter\r@Setter\r@NoArgsConstructor\r@Accessors(chain = true)\r@Entity\r@Table(name = \u0026#34;reservation\u0026#34;)\rpublic class Reservation {\r@Id\r@GeneratedValue(strategy = GenerationType.IDENTITY)\r@Column(name = \u0026#34;booking_reference\u0026#34;)\rprivate long bookingReference;\r@Column(name = \u0026#34;passenger_id\u0026#34;)\rprivate int passengerId;\r@Column(name = \u0026#34;flight_id\u0026#34;)\rprivate int flightId;\r@Column(name = \u0026#34;reservation_date\u0026#34;)\rprivate String reservationDate;\r@Column(name = \u0026#34;reservation_time\u0026#34;)\rprivate String reservationTime;\r@Column(name = \u0026#34;reservation_status\u0026#34;)\rprivate String reservationStatus;\r@Column(name = \u0026#34;travel_class\u0026#34;)\rprivate String travelClass;\r@Column(name = \u0026#34;ticket_price\u0026#34;)\rprivate double ticketPrice;\r@Column(name = \u0026#34;currency_code\u0026#34;)\rprivate String currencyCode;\r@Column(name = \u0026#34;payment_status\u0026#34;)\rprivate String paymentStatus;\r@Column(name = \u0026#34;payment_mode\u0026#34;)\rprivate String paymentMode;\r@Column(name = \u0026#34;contact_number\u0026#34;)\rprivate String contactNumber;\r@Column(name = \u0026#34;contact_email\u0026#34;)\rprivate String contactEmail;\r//Create a tostring method to convert the object to string\r@Override\rpublic String toString() {\rreturn \u0026#34;Reservation{\u0026#34; +\r\u0026#34;bookingReference=\u0026#34; + bookingReference +\r\u0026#34;, passengerId=\u0026#34; + passengerId +\r\u0026#34;, flightId=\u0026#34; + flightId +\r\u0026#34;, reservationDate=\u0026#39;\u0026#34; + reservationDate + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, reservationTime=\u0026#39;\u0026#34; + reservationTime + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, reservationStatus=\u0026#39;\u0026#34; + reservationStatus + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, travelClass=\u0026#39;\u0026#34; + travelClass + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, ticketPrice=\u0026#34; + ticketPrice +\r\u0026#34;, currencyCode=\u0026#39;\u0026#34; + currencyCode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, paymentStatus=\u0026#39;\u0026#34; + paymentStatus + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, paymentMode=\u0026#39;\u0026#34; + paymentMode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, contactNumber=\u0026#39;\u0026#34; + contactNumber + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, contactEmail=\u0026#39;\u0026#34; + contactEmail + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\r//Create a toJson method to convert the object to Json String\rpublic String toJson() {\rreturn \u0026#34;{\u0026#34; +\r\u0026#34;\\\u0026#34;bookingReference\\\u0026#34;:\u0026#34; + bookingReference +\r\u0026#34;, \\\u0026#34;passengerId\\\u0026#34;:\u0026#34; + passengerId +\r\u0026#34;, \\\u0026#34;flightId\\\u0026#34;:\u0026#34; + flightId +\r\u0026#34;, \\\u0026#34;reservationDate\\\u0026#34;:\\\u0026#34;\u0026#34; + reservationDate + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;reservationTime\\\u0026#34;:\\\u0026#34;\u0026#34; + reservationTime + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;reservationStatus\\\u0026#34;:\\\u0026#34;\u0026#34; + reservationStatus + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;travelClass\\\u0026#34;:\\\u0026#34;\u0026#34; + travelClass + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\u0026#34; + ticketPrice +\r\u0026#34;, \\\u0026#34;currencyCode\\\u0026#34;:\\\u0026#34;\u0026#34; + currencyCode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;paymentStatus\\\u0026#34;:\\\u0026#34;\u0026#34; + paymentStatus + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;paymentMode\\\u0026#34;:\\\u0026#34;\u0026#34; + paymentMode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;contactNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + contactNumber + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;contactEmail\\\u0026#34;:\\\u0026#34;\u0026#34; + contactEmail + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\rpublic long getBookingReference() {\rreturn bookingReference;\r}\rpublic void setBookingReference(long bookingReference) {\rthis.bookingReference = bookingReference;\r}\rpublic int getPassengerId() {\rreturn passengerId;\r}\rpublic void setPassengerId(int passengerId) {\rthis.passengerId = passengerId;\r}\rpublic int getFlightId() {\rreturn flightId;\r}\rpublic void setFlightId(int flightId) {\rthis.flightId = flightId;\r}\rpublic String getReservationDate() {\rreturn reservationDate;\r}\rpublic void setReservationDate(String reservationDate) {\rthis.reservationDate = reservationDate;\r}\rpublic String getReservationTime() {\rreturn reservationTime;\r}\rpublic void setReservationTime(String reservationTime) {\rthis.reservationTime = reservationTime;\r}\rpublic String getReservationStatus() {\rreturn reservationStatus;\r}\rpublic void setReservationStatus(String reservationStatus) {\rthis.reservationStatus = reservationStatus;\r}\rpublic String getTravelClass() {\rreturn travelClass;\r}\rpublic void setTravelClass(String travelClass) {\rthis.travelClass = travelClass;\r}\rpublic double getTicketPrice() {\rreturn ticketPrice;\r}\rpublic void setTicketPrice(double ticketPrice) {\rthis.ticketPrice = ticketPrice;\r}\rpublic String getCurrencyCode() {\rreturn currencyCode;\r}\rpublic void setCurrencyCode(String currencyCode) {\rthis.currencyCode = currencyCode;\r}\rpublic String getPaymentStatus() {\rreturn paymentStatus;\r}\rpublic void setPaymentStatus(String paymentStatus) {\rthis.paymentStatus = paymentStatus;\r}\rpublic String getPaymentMode() {\rreturn paymentMode;\r}\rpublic void setPaymentMode(String paymentMode) {\rthis.paymentMode = paymentMode;\r}\rpublic String getContactNumber() {\rreturn contactNumber;\r}\rpublic void setContactNumber(String contactNumber) {\rthis.contactNumber = contactNumber;\r}\rpublic String getContactEmail() {\rreturn contactEmail;\r}\rpublic void setContactEmail(String contactEmail) {\rthis.contactEmail = contactEmail;\r}\r} Create a ReservationDetails DTO class that will be used to validate all and capture the input parameters provided to the bookFlight API. Open ReservationDetails.java add the following code package com.airlines.catalog.dto;\rimport lombok.Getter;\rimport lombok.NoArgsConstructor;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport javax.validation.constraints.*;\r/* Create a class ReservationDetails with attributes\rfirstName not blank, lastName not blank,\rgender, age between 1 and 120, flightId as int, travelClass not blank,\rticketPrice as double and not blank,\rcurrencyCode exactly 3 characters, reservationStatus, paymentStatus,\rpaymentMode, ContactEmail should be valid email, contactNumber should be valid phone number\r*/\r@Getter\r@Setter\r@NoArgsConstructor\r@Accessors(chain = true)\rpublic class ReservationDetails {\r@NotBlank(message = \u0026#34;First Name is required\u0026#34;)\rprivate String firstName;\r@NotBlank(message = \u0026#34;Last Name is required\u0026#34;)\rprivate String lastName;\rprivate String gender;\r@Min(value = 1, message = \u0026#34;Age should be greater than 1\u0026#34;)\r@Max(value = 120, message = \u0026#34;Age should be less than 120\u0026#34;)\rprivate int age;\r@NotNull(message = \u0026#34;Flight Id is required\u0026#34;)\rprivate int flightId;\r@NotBlank(message = \u0026#34;Travel Class is required\u0026#34;)\rprivate String travelClass;\r@NotNull(message = \u0026#34;Ticket Price is required\u0026#34;)\rprivate double ticketPrice;\r@NotBlank(message = \u0026#34;Currency Code is required\u0026#34;)\r@Pattern(regexp = \u0026#34;^[A-Z]{3}$\u0026#34;, message = \u0026#34;Currency Code should be exactly 3 characters\u0026#34;)\rprivate String currencyCode;\rprivate String reservationStatus;\rprivate String paymentStatus;\rprivate String paymentMode;\r@Email(message = \u0026#34;Contact Email should be valid email\u0026#34;)\rprivate String contactEmail;\r// Phone Number should be 12 or more digits and starts with +\r@Pattern(regexp = \u0026#34;^\\\\+[0-9]{12,}$\u0026#34;, message = \u0026#34;Contact Number should be valid phone number\u0026#34;)\rprivate String contactNumber;\rpublic String getFirstName() {\rreturn firstName;\r}\rpublic void setFirstName(String firstName) {\rthis.firstName = firstName;\r}\rpublic String getLastName() {\rreturn lastName;\r}\rpublic void setLastName(String lastName) {\rthis.lastName = lastName;\r}\rpublic String getGender() {\rreturn gender;\r}\rpublic void setGender(String gender) {\rthis.gender = gender;\r}\rpublic int getAge() {\rreturn age;\r}\rpublic void setAge(int age) {\rthis.age = age;\r}\rpublic int getFlightId() {\rreturn flightId;\r}\rpublic void setFlightId(int flightId) {\rthis.flightId = flightId;\r}\rpublic String getTravelClass() {\rreturn travelClass;\r}\rpublic void setTravelClass(String travelClass) {\rthis.travelClass = travelClass;\r}\rpublic double getTicketPrice() {\rreturn ticketPrice;\r}\rpublic void setTicketPrice(double ticketPrice) {\rthis.ticketPrice = ticketPrice;\r}\rpublic String getCurrencyCode() {\rreturn currencyCode;\r}\rpublic void setCurrencyCode(String currencyCode) {\rthis.currencyCode = currencyCode;\r}\rpublic String getReservationStatus() {\rreturn reservationStatus;\r}\rpublic void setReservationStatus(String reservationStatus) {\rthis.reservationStatus = reservationStatus;\r}\rpublic String getPaymentStatus() {\rreturn paymentStatus;\r}\rpublic void setPaymentStatus(String paymentStatus) {\rthis.paymentStatus = paymentStatus;\r}\rpublic String getPaymentMode() {\rreturn paymentMode;\r}\rpublic void setPaymentMode(String paymentMode) {\rthis.paymentMode = paymentMode;\r}\rpublic String getContactEmail() {\rreturn contactEmail;\r}\rpublic void setContactEmail(String contactEmail) {\rthis.contactEmail = contactEmail;\r}\rpublic String getContactNumber() {\rreturn contactNumber;\r}\rpublic void setContactNumber(String contactNumber) {\rthis.contactNumber = contactNumber;\r}\r} Build JPA Repository Interfaces to acess the data from MYSQL Tables. Specify the query patterns to save the data to passenger and reservation table Open PassengerRepository.java add the following code package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Passenger;\rimport org.springframework.data.jpa.repository.JpaRepository;\rimport org.springframework.stereotype.Repository;\r/* create jpa repository interface PassengerRepository.\rAdd a method to save Passenger. */\r@Repository\rpublic interface PassengerRepository extends JpaRepository\u0026lt;Passenger, Integer\u0026gt; {\rPassenger save(Passenger passenger);\r} Open ReservationRepository.java add the following code package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.data.jpa.repository.JpaRepository;\rimport org.springframework.stereotype.Repository;\r// Create interface ReservationRepository that extends JpaRepository.\r// Add a method to save reservation.\r@Repository\rpublic interface ReservationRepository extends JpaRepository\u0026lt;Reservation, Long\u0026gt; {\rReservation save(Reservation reservation);\r} Create exception handler classes to handle following business exception: Invalid data inputs to the reservation API, invalid flight Id and no seats available in the flight. Open FlightNotFoundException.java add the following code package com.airlines.catalog.exception;\rimport lombok.NoArgsConstructor;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport lombok.Getter;\r/*\rCreate a public class FlightNotFoundException that extends Runtime Exception with member variable\rresponse entity.\rCreate constructor with flightId as input parameter\rException message returned should be \u0026#34;No flights found for the flight id \u0026#34; and append flight id\r*/\r@Getter\rpublic class FlightNotFoundException extends RuntimeException {\rprivate ResponseEntity\u0026lt;String\u0026gt; responseEntity;\rpublic FlightNotFoundException(long flightId) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found for the flight id \u0026#34; + flightId, HttpStatus.NOT_FOUND);\r}\r} Open RequestedSeatsNotAvailable.java add the following code package com.airlines.catalog.exception;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\r/*\rCreate a public class RequestedSeatsNotAvailable that extends Runtime Exception with member variable\rresponse entity, constructor has no arguments\rexception message returned should be \u0026#34;Seats not available. Reservation could not be made\u0026#34;\r*/\r@Getter\rpublic class RequestedSeatsNotAvailable extends RuntimeException {\rprivate ResponseEntity\u0026lt;String\u0026gt; responseEntity;\rpublic RequestedSeatsNotAvailable() {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Seats not available. Reservation could not be made\u0026#34;, HttpStatus.NOT_FOUND);\r}\r} Open GlobalExceptionHandler.java add the following code package com.airlines.catalog.exception;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport org.springframework.validation.FieldError;\rimport org.springframework.web.bind.MethodArgumentNotValidException;\rimport org.springframework.web.bind.annotation.ExceptionHandler;\rimport org.springframework.web.bind.annotation.RestControllerAdvice;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Map;\rimport java.util.stream.Collectors;\r/*create a rest controller advice GlobalExceptionHandler*/\r@RestControllerAdvice\rpublic class GlobalExceptionHandler {\r//create exception handler handleValidationErrors to handle validation errors\r// get all the errors from exception\r// get the errors and add them to the map\r// create a new response entity\r// return the response entity\r@ExceptionHandler(MethodArgumentNotValidException.class)\rpublic ResponseEntity\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; handleValidationErrors(MethodArgumentNotValidException ex) {\rMap\u0026lt;String, String\u0026gt; errors = new HashMap\u0026lt;\u0026gt;();\rList\u0026lt;FieldError\u0026gt; fieldErrors = ex.getBindingResult().getFieldErrors();\rfieldErrors.forEach(error -\u0026gt; errors.put(error.getField(), error.getDefaultMessage()));\rreturn new ResponseEntity\u0026lt;\u0026gt;(errors, HttpStatus.BAD_REQUEST);\r}\r} Build the FlightBooking service class that creates a new database transaction to save the passenger, reservation data into respective tables and also send an SNS notification to reservation-success topic. An email notification will be sent to the configured email address. This method will also check for seat availability before proceeding with the reservation and throw an business exception, if seats are not available. Open FlightBooking.java add the following code package com.airlines.catalog.service;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Flight;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport com.airlines.catalog.repository.FlightRepository;\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport org.springframework.stereotype.Service;\rimport org.springframework.transaction.annotation.Propagation;\rimport org.springframework.transaction.annotation.Transactional;\rimport software.amazon.awssdk.regions.Region;\rimport software.amazon.awssdk.services.sns.SnsClient;\rimport software.amazon.awssdk.services.sns.model.PublishRequest;\rimport software.amazon.awssdk.services.sns.model.PublishResponse;\r@Service\rpublic class FlightBooking {\r/* create a method send message with sns arn and AWS Region as input parameter*/\rpublic void sendMessage(String message, String arn, Region region) {\rSnsClient snsClient = SnsClient.builder()\r.region(region)\r.build();\rPublishRequest request = PublishRequest.builder()\r.message(message)\r.topicArn(arn)\r.build();\rPublishResponse result = snsClient.publish(request);\rSystem.out.println(result.messageId() + \u0026#34; Message sent. Status is \u0026#34; + result.sdkHttpResponse().statusCode());\rsnsClient.close();\r}\r/*Create reserveFlight method with passenger, reservation, passengerRepository,\rreservationRepository,flightresultsRepository, number of passengers as input parameters.\rMethod should return a Boolean output\rGet the flight details by calling findById method from FlightresultsRepository with\rflightId as input parameter\rif no result is null throw FlightNotFoundException\rIf number of seats is less than number of passengers throw RequestedSeatsNotAvailable exception with\rflightId as input parameter\rCall getseatAvailable from flight object to get the available seats\rIf seats available is less than number of passengers then return false\rIf seats available is greater than or equal to number of passengers then\rdecrease the seats available attribute in flight object by calling setseatAvailable method\rSave the passenger and get the passenger id\rupdate the reservation object with the passenger id\rsave the reservation details\rcall sendMessage by passing reservation json string as input parameter\rMethod should return True or False based on the result of save methods\rAll of the above steps should be done within a transaction.\r*/\r@Transactional(propagation = Propagation.REQUIRED)\rpublic Boolean reserveFlight(Passenger passenger, Reservation reservation,\rPassengerRepository passengerRepository, ReservationRepository reservationRepository, FlightRepository flightRepository,\rint numberOfPassengers, String topicArn, Region region) throws FlightNotFoundException, RequestedSeatsNotAvailable {\rFlight flight = flightRepository.findById(reservation.getFlightId());\rif (flight == null) {\rthrow new FlightNotFoundException(reservation.getFlightId());\r}\rif (flight.getSeatAvailable() \u0026lt; numberOfPassengers) {\rthrow new RequestedSeatsNotAvailable();\r}\rflight.setSeatAvailable(flight.getSeatAvailable() - numberOfPassengers);\rflightRepository.save(flight);\rPassenger passenger1 = passengerRepository.save(passenger);\rreservation.setPassengerId(passenger1.getPassengerId());\rreservationRepository.save(reservation);\rsendMessage(reservation.toString(), topicArn, region);\rreturn true;\r}\r} Create the book flight API Controller Open FlightReservation.java add the following code package com.airlines.catalog.controller;\rimport java.nio.channels.ScatteringByteChannel;\rimport java.util.List;\rimport com.airlines.catalog.dto.FlightDetails;\rimport com.airlines.catalog.exception.AuthenticationException;\rimport com.airlines.catalog.repository.AirportRepository;\rimport com.airlines.catalog.repository.FlightRepository;\rimport com.airlines.catalog.service.FlightDetailsService;\rimport com.auth0.jwt.JWT;\rimport com.auth0.jwt.JWTVerifier;\rimport com.auth0.jwt.algorithms.Algorithm;\rimport com.auth0.jwt.interfaces.DecodedJWT;\rimport org.springframework.beans.factory.annotation.Autowired;\rimport org.springframework.beans.factory.annotation.Value;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport org.springframework.web.bind.annotation.GetMapping;\rimport org.springframework.web.bind.annotation.RequestHeader;\rimport org.springframework.web.bind.annotation.RequestParam;\rimport org.springframework.web.bind.annotation.RestController;\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport com.airlines.catalog.service.FlightBooking;\rimport com.airlines.catalog.dto.ReservationDetails;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.web.bind.annotation.*;\rimport software.amazon.awssdk.regions.Region;\rimport javax.validation.Valid;\r@RestController\rpublic class FlightReservation {\r@Autowired\rFlightRepository flightresultsRepository;\r@Autowired\rAirportRepository airportresultsRepository;\r@Autowired\rFlightDetailsService FlightDetailsService;\r@Autowired\rPassengerRepository passengerRepository;\r@Autowired\rReservationRepository reservationRepository;\r@Autowired\rFlightBooking flightBooking;\r@Value(\u0026#34;${cognito.userpool.id}\u0026#34;)\rprivate String cognitoUserPoolId;\r@Value(\u0026#34;${aws.region}\u0026#34;)\rprivate String awsRegion;\r@Value(\u0026#34;${sns.arn}\u0026#34;)\rprivate String snsTopicArn;\r/* Create a private method verifyToken to verify JWT token with input parameters as\rCognito user pool id, AWS region and token string. Function returns a Boolean.\rConstruct the Cognito well known url and then verify the token using RSA Algorithm.\rcatch all Exception throw new authenticationException.*/\rprivate Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException {\rtry {\rSystem.out.println(\u0026#34;token=\u0026#34; + token);\rString cognitoWellKnownUrl = \u0026#34;https://\u0026#34;+ cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;;\rAlgorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl));\rJWTVerifier verifier = JWT.require(algorithm).build();\rDecodedJWT decodedJWT = verifier.verify(token);\rreturn true;\r} catch (Exception e) {\rthrow new AuthenticationException(e);\r}\r}\r/* Create a rest controller getFlightDetails to get flight details with HTTP GET Method ,\r/flight path and request parameters as departure date, departure airport code and arrival airport code\rJWT Token in the Authorization Header.\rRest controller returns a ResponseEntity of string.\r*/\r@GetMapping(\u0026#34;/flight\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate,\r@RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode,\r@RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException {\r/* Call verifyToken method, catch authentication exception and return the responseEntity\rif token is valid and call the findFlights method in FlightDetailsService class\rwith input parameters departure date, departure airport code,\rarrival airport code, flightResultsRepository and airportResultsRepository.\rIf flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;.\rIf authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden\r*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\rList\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository);\rif (flights.size() \u0026gt; 0) {\rreturn new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK);\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK);\r}\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN);\r}\r} catch (AuthenticationException e) {\rreturn e.getResponseEntity();\r}\r}\r/* Create a rest controller bookFlight to get flight details with HTTP POST Method ,\r/reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string.\rAuthorization token is passed in the header of the request.\r*/\r@PostMapping(\u0026#34;/reserve\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; bookFlight(@RequestBody @Valid ReservationDetails reservationDetails,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization)\rthrows AuthenticationException, FlightNotFoundException, RequestedSeatsNotAvailable {\rResponseEntity\u0026lt;String\u0026gt; responseEntity = null;\r/*validate the token by calling verifyToken method in a try catch block.\rCatch authenticationExceptionHandler exception return the response entity object\rfrom the exception object*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\r/* create passenger object assign first name, last name and gender of passenger object from reservationDetails object */\rPassenger passenger = new Passenger();\rpassenger.setFirstName(reservationDetails.getFirstName());\rpassenger.setLastName(reservationDetails.getLastName());\rpassenger.setGender(reservationDetails.getGender());\r//Check the age from reservationDetails object and populate adult field\rif (reservationDetails.getAge() \u0026gt;= 18) {\rpassenger.setAdult(true);\r}\r/* create reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail,\rcontactNumber, reservationStatus, paymentStatus, paymentMode */\rReservation reservation = new Reservation();\rreservation.setFlightId(reservationDetails.getFlightId());\rreservation.setTravelClass(reservationDetails.getTravelClass());\rreservation.setTicketPrice(reservationDetails.getTicketPrice());\rreservation.setCurrencyCode(reservationDetails.getCurrencyCode());\rreservation.setContactEmail(reservationDetails.getContactEmail());\rreservation.setContactNumber(reservationDetails.getContactNumber());\rreservation.setReservationStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentMode(\u0026#34;Cash\u0026#34;);\r/* set the date reservation date in yyyy-MM-dd format and\rreservation time in HH:mm:ss format for current date and time*/\rreservation.setReservationDate(java.time.LocalDate.now().toString());\rreservation.setReservationTime(java.time.LocalTime.now().toString());\rBoolean result;\rtry {\rint noOfPassengers = 1;\rRegion region = Region.of(awsRegion);\rresult = flightBooking.reserveFlight(passenger, reservation, passengerRepository,\rreservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region);\r}\rcatch (FlightNotFoundException e) {\rreturn e.getResponseEntity();\r}\rcatch (RequestedSeatsNotAvailable e) {\rreturn e.getResponseEntity();\r}\r/* check if the reservation is successful\rreturn response entity object with HTTP status of ok and\rmessage \u0026#34;reservation made successfully\u0026#34; appending the booking Reference\rif the reservation is not successful\rreturn response entity object with HTTP status of bad request */\rif (result) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation made successfully. Booking Reference: \u0026#34; + reservation.getBookingReference(), HttpStatus.OK);\r}\relse {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation failed\u0026#34;, HttpStatus.BAD_REQUEST);\r}\r}\r} catch (AuthenticationException e) {\rresponseEntity = e.getResponseEntity();\r}\rreturn responseEntity;\r}\r} "
},
{
	"uri": "//localhost:1313/2-cloudformation/",
	"title": "CloudFormation",
	"tags": [],
	"description": "",
	"content": "Cloudformation Download the Cloudformation cfn-basic-setup.yaml from this location. This cloudformation will setup all the infrastructure in this workshop DownLoad here\nFocus how infras of file .yaml\nIn the console search, type cloudformation and select Cloudformation Service\n4. Some region will not alvailable create all resources in cloudformation, so firstly you will change region to us-east-1\n5. Then click Create stack.\n6. Click setting like instruction in image and chose file cfn-basic-setup.yaml that you downloaded. and click Next\nFill the unique name and others settings sets default. Then Next Acknowledge all the options and click Submit You will prompt the processing wait about 20 minute to complete processcing. Screen when the process finish. "
},
{
	"uri": "//localhost:1313/6-configdb/6.1-dbfindflight/",
	"title": "DB find flight",
	"tags": [],
	"description": "",
	"content": "Design Database Airport table - stores the details of the Airport with Airport Code as primary key and associated airport details. Flight table - stores the inventory of flights with their schedule, capacity and seat availability. Create table and data We create table by running SQL command below in MySQL Workbench to load 2 table data USE FlightReservationDB;\rCREATE TABLE airport(\rairport_code VARCHAR(10) PRIMARY KEY,\rairport_name VARCHAR(50),\rairport_city VARCHAR(50),\rairport_locale VARCHAR(50)\r);\rCREATE TABLE flight (\rid INT PRIMARY KEY,\rdeparture_date DATE,\rdeparture_time TIME,\rdeparture_airport_code VARCHAR(3),\rarrival_date DATE,\rarrival_time TIME,\rarrival_airport_code VARCHAR(3),\rflight_number VARCHAR(10),\rflight_duration INT,\rticket_price DOUBLE,\rticket_currency VARCHAR(3),\rseat_capacity INT,\rseat_available INT,\rCONSTRAINT fk_departure_airport_code FOREIGN KEY (departure_airport_code) REFERENCES airport(airport_code),\rCONSTRAINT fk_arrival_airport_code FOREIGN KEY (arrival_airport_code) REFERENCES airport(airport_code)\r); Paste SQL command to MySQL Workbench. Execute SQL command to create 2 table and see result. We do by the same way with SQL command below to load data in to 2 table that we created in previous step insert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;LHR\u0026#39;, \u0026#39;London Heathrow Airport\u0026#39;, \u0026#39;London\u0026#39;, \u0026#39;UK\u0026#39;);\rinsert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;CDG\u0026#39;, \u0026#39;Charles De Gaulle Airport\u0026#39;, \u0026#39;Paris\u0026#39;, \u0026#39;France\u0026#39;);\rinsert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;LAX\u0026#39;, \u0026#39;Los Angeles International Airport\u0026#39;, \u0026#39;Los Angeles\u0026#39;, \u0026#39;USA\u0026#39;);\rinsert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;MIA\u0026#39;, \u0026#39;Miami International Airport\u0026#39;, \u0026#39;Miami\u0026#39;, \u0026#39;USA\u0026#39;);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(1, \u0026#39;2023-08-01\u0026#39;, \u0026#39;10:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;14:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;MIA-LAX-001\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(2, \u0026#39;2023-08-01\u0026#39;, \u0026#39;14:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;14:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;MIA-LAX-002\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(3, \u0026#39;2023-08-01\u0026#39;, \u0026#39;15:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;LHR-CDG-001\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(4, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;LHR-CDG-002\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(5, \u0026#39;2023-08-02\u0026#39;, \u0026#39;16:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-02\u0026#39;, \u0026#39;16:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;LHR-CDG-003\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100); Run the SQL command and see the result 5. Check one table and data. "
},
{
	"uri": "//localhost:1313/6-configdb/6.2-dbreserve/",
	"title": "DB Reserve",
	"tags": [],
	"description": "",
	"content": "Design Database Passenger table - to hold pasenger\u0026rsquo;s personal information Reservation table - to hold the flight reservations detail Create table and data Create the tables required for the reservation API. CREATE TABLE passenger (\rpassenger_id INT NOT NULL AUTO_INCREMENT,\radult BOOLEAN NOT NULL,\rgender VARCHAR(10) NOT NULL,\rfirst_name VARCHAR(50) NOT NULL,\rlast_name VARCHAR(50) NOT NULL,\rPRIMARY KEY (passenger_id)\r);\rCREATE TABLE reservation (\rbooking_reference BIGINT NOT NULL AUTO_INCREMENT,\rpassenger_id INT NOT NULL,\rflight_id INT NOT NULL,\rreservation_date DATE NOT NULL,\rreservation_time TIME NOT NULL,\rreservation_status VARCHAR(20) NOT NULL,\rtravel_class VARCHAR(20) NOT NULL,\rticket_price DECIMAL(10,2) NOT NULL,\rcurrency_code VARCHAR(3) NOT NULL,\rpayment_status VARCHAR(20) NOT NULL,\rpayment_mode VARCHAR(20) NOT NULL,\rcontact_number VARCHAR(20) NOT NULL,\rcontact_email VARCHAR(50) NOT NULL,\rPRIMARY KEY (booking_reference),\rFOREIGN KEY (passenger_id) REFERENCES passenger(passenger_id),\rFOREIGN KEY (flight_id) REFERENCES flight(id)\r); Paste SQL command to MySQL Workbench and execute command, then take result. "
},
{
	"uri": "//localhost:1313/8-api/8.2-apireserve/",
	"title": "Reserve API",
	"tags": [],
	"description": "",
	"content": "Diagram API Content: Write API Test API "
},
{
	"uri": "//localhost:1313/8-api/8.1-apifindflight/8.1.2-testapi/",
	"title": "Test API",
	"tags": [],
	"description": "",
	"content": " After you write API, lets test it. Firstly, find file FlightBookingApplication.java by path src/main/java/com/airlines/catalog/ to open it Click button triangle Chose Run \u0026lsquo;FlightBookingMain\u0026rsquo; Wait about seconds to finish starting application Open PostMan application to test API In the input URL, paste CRUL below that I prepair for you to save your time. It includes input parameters for calling API This is CURL curl --location \u0026#39;localhost:8090/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=LHR\u0026amp;arrivalAirportCode=CDG\u0026#39; \\\r--header \u0026#39;Authorization: eyJraWQiOiJLQzh0Zzd0VHcraDJoVXAzeHFUNmJybHV6SUloT2JNZWtoZmc5MVNPd2swPSIsImFsZyI6IlJTMjU2In0.eyJhdF9oYXNoIjoiWUpzYVFjaDNlbGt1R2Y3bW9BT0RtUSIsInN1YiI6ImM1OTVhNDEzLTk5NmQtNGFkNi1hNTFiLTVhNTk3ZjE4MTM0YSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9QTU9zUlBLM1kiLCJjb2duaXRvOnVzZXJuYW1lIjoibGVkYWNkZXB0cmFpIiwiYXVkIjoiNGk3aWJvYzI0aWpxYnNxNTI5ZmI3cG5kOGwiLCJldmVudF9pZCI6IjI4OTVlNWJjLTE4MWYtNDIyOS1hNGFjLTA3MWE3MWJmYjQxNiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNzExNzM5MzA3LCJuYW1lIjoibGUgZHVjIGFuaCIsImV4cCI6MTcxMTc0MjkwNywiaWF0IjoxNzExNzM5MzA3LCJqdGkiOiJkOTgzMzMyNC1mOGJlLTRiZGYtODM5MC1mMThkYmMwZTI3MmEiLCJlbWFpbCI6ImxlZGFjZGVwdHJhaUBnbWFpbC5jb20ifQ.E478H8NzHp1a2nt5MmrF8Qe52grqJ8wUk-55INdlaiT2arQQe8Aj1JeIbt8QSs14KTF5iD4EEoLMkkoqDi4JvCG7IU8BYCb-ygEEd6IazVanqO7acduh8xfWSosY3RCrt3xZSdDUHHXLicCBo8yz0Z1TqAWPfxgN1CV46ErRh_zF05HJ1c77ybqUyR5FVyJEGQDs9XkX0MR9ol6rJTWylK2e448MbsHtQ17xfDvOmS_RSUrN4r7zHVmxK2p_23EQ9C54gTs-GXz478JT9T_uR1JXONmtaLZEi7-lfrpB2mkmLd9MQ5dgJfKFd59fd4bV0IKB3G6t2d0ZMnowjitttw\u0026#39; You will prompt to staging like image, it is not done to call API Click to Headers, see key Authorization is the token like apart stuff of curl I mention before. It is my expired JWT token, now you must take new JWT token. Back to Amazon Cognito chose section User pools and click TwoAuthen-UserPool\nClick App integration Scroll down in the App client and analysts chose App client In Hosted UI section, click View Hosted UI You will prompt to the new Sign in tab. Fill account information that you create at the previous step, and click Sign in Copy URL to the Notedpad Split id_token Copy id_token. Token valid in 1 hour, if it expired, you will comeback to the previous image and do it again to take new token Paste it to the value of Authorization Now we have all input to call API, next click Send and see output It is information of flight. You call find flight API successfully. "
},
{
	"uri": "//localhost:1313/8-api/8.2-apireserve/8.2.2-testapi/",
	"title": "Test API",
	"tags": [],
	"description": "",
	"content": " After complete API, click rerun button. Running time is about seconds Copy my curl below prepaired curl --location \u0026#39;localhost:8090/reserve\u0026#39; \\\r--header \u0026#39;Authorization: eyJraWQiOiJLQzh0Zzd0VHcraDJoVXAzeHFUNmJybHV6SUloT2JNZWtoZmc5MVNPd2swPSIsImFsZyI6IlJTMjU2In0.eyJhdF9oYXNoIjoiYXUzNFdHZm5GeUs0YVdpa1gxa2lkdyIsInN1YiI6ImM1OTVhNDEzLTk5NmQtNGFkNi1hNTFiLTVhNTk3ZjE4MTM0YSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9QTU9zUlBLM1kiLCJjb2duaXRvOnVzZXJuYW1lIjoibGVkYWNkZXB0cmFpIiwiYXVkIjoiNGk3aWJvYzI0aWpxYnNxNTI5ZmI3cG5kOGwiLCJldmVudF9pZCI6IjE4YmUyMmM2LTdkZjUtNDg1Ny04YmE5LTkyZjQwNzhkZWZmZSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNzExNzQ0NDAwLCJuYW1lIjoibGUgZHVjIGFuaCIsImV4cCI6MTcxMTc0ODAwMCwiaWF0IjoxNzExNzQ0NDAwLCJqdGkiOiI1NDhjZjlmZS03ZTc5LTQ4ZWUtYjJlZi1kNjVjZjM1MzU0NjEiLCJlbWFpbCI6ImxlZGFjZGVwdHJhaUBnbWFpbC5jb20ifQ.G3cTAq-4zaDGoOXm8PeScb1hsKWZrSJwRaHolbhCIynuyLwqvyDxijsvSTQgeRYbzn4ZPqMt1RJ22XjvA4n7gTrFKAmcudhM7XndGVsJadZ2ks29VvnIJQXmxu7a66R5GTCucgibbkNBAPI9vUOZl5-QuF6UopBDflCFKtQPlwTW5rtR8bhGMVnEZlTundBLwg3wZcNve4ChyIePMGtOURCW7aSsIh3VGU7whFVK3jAR-I_zm4FtQIwBI0grgEjxxizr5u-3HD4o30uT5X_dZQmguyYi9Rhiq_uAL6Be1RmmYl74KYCDZsKmZdLIIVDIM5LvGbxXt8zpvuo9JosiCA\u0026#39; \\\r--header \u0026#39;Content-Type: application/json\u0026#39; \\\r--data-raw \u0026#39;{\r\u0026#34;flightId\u0026#34;: 1,\r\u0026#34;travelClass\u0026#34;: \u0026#34;Economy\u0026#34;,\r\u0026#34;ticketPrice\u0026#34;: 1000,\r\u0026#34;currencyCode\u0026#34;: \u0026#34;USD\u0026#34;,\r\u0026#34;paymentMode\u0026#34;: \u0026#34;Credit Card\u0026#34;,\r\u0026#34;contactNumber\u0026#34;: \u0026#34;+123456789012\u0026#34;,\r\u0026#34;contactEmail\u0026#34;: \u0026#34;ledacdeptrai@gmail.com\u0026#34;,\r\u0026#34;reservationStatus\u0026#34;: \u0026#34;Confirmed\u0026#34;,\r\u0026#34;reservationDate\u0026#34;: \u0026#34;2022-01-01\u0026#34;,\r\u0026#34;reservationTime\u0026#34;: \u0026#34;12:00:00\u0026#34;,\r\u0026#34;paymentStatus\u0026#34;: \u0026#34;Paid\u0026#34;,\r\u0026#34;passengerId\u0026#34;: 1,\r\u0026#34;lastName\u0026#34;: \u0026#34;Last Name is required\u0026#34;,\r\u0026#34;firstName\u0026#34;: \u0026#34;First Name is required\u0026#34;,\r\u0026#34;age\u0026#34;: \u0026#34;30\u0026#34;,\r\u0026#34;gender\u0026#34;:\u0026#34;Male\u0026#34;\r}\u0026#39; From URL, paste curl 3. In Headers section, replace Authorization like [Testing Find Flight API] 4. Click send and observe the result 5. Check your email you use for creating account, you will see email like image below. You call API successfully. "
},
{
	"uri": "//localhost:1313/3-connectec2/",
	"title": "Connect to EC2",
	"tags": [],
	"description": "",
	"content": "Preparation steps Next we will setting EC2 to connect by RDP from your computer\nFrom home console, we select EC2. Click to instances running. Select instance that prompt in display. Click to security, and then click to Security group to setting RDP. Chose inbound rules then Edit bound rules. Add rule In Type choose RDP and Source select My IP and Save rules. Comeback the place that look like the breadcumbs. And click Connect Click to RDP client and download remote desktop file. 10. Open file that you downloaded .\nSelect Connect and Next in your prompting display to connect remote EC2, until you have to type password. Then you must go to Secret manager service which is save all secrete like password, API key, DB credentials, and you will go there to take the password of user Administrator to connect EC2. From home console select AWS Secretes Manager and then click to Secretes it will prompt to display like the following image below. Locate the entry named EC2instancesSecret and select it. 13. Find section Secret value and select Retrieve secret value. 14. Copy the pass_word, that is password of user Administrator to connect to EC2.\n15. Login to the instance using Administrator as the username. Enter the password that you retrieved in the previous step.\n16. You login successfully, you will use it in the next section. "
},
{
	"uri": "//localhost:1313/4-cognito/",
	"title": "Setting Cognito",
	"tags": [],
	"description": "",
	"content": "Setting Cognito In this step, we will set Cognito for creating user,password. Using it to authenticate to connect application that like enterprise application.\nFrom home console, select Cognito Click to User pool and select user pool named TwoAuthen-UserPool. Select App integration Scroll down to the bottom, and select UserPoolClient In the Hosted UI section, click to View Hosted UI You will prompt to new tab like image below. This is first time we go here, so firstly we have to Sign up. Fill information to create user, that we will use for the following section. An email sent, that is final step to create user. Fill you code you received and click Confirm account. Now you will redirected to localhost:8080 page. Ignore error on the page. We will back later to take access token from URL bar for testing API. "
},
{
	"uri": "//localhost:1313/5-sns/",
	"title": "Simple Notification Service",
	"tags": [],
	"description": "",
	"content": "In this guide, we will discuss how to create subcription that we use to confirm call api successfully.\nFrom home console, select Simple Notification Service Select Topics section You have 1 topic that create from Cloudformation. then Click to topic link In the reservation-success topic, click Create subcription Choose protocol Email, Endpoint is your email that you want to receive notification. Then click Create subscription. Check your recieved email, and click Confirm subscription You will prompt page that inform your subscription is confirmed, you can unsubscribe. You setting successfully SNS topic that recieved email to inform API called successful. "
},
{
	"uri": "//localhost:1313/6-configdb/",
	"title": "Config DB",
	"tags": [],
	"description": "",
	"content": "In this guide, we will you MySQL Workbench to connect to Database instances that created by cloudformation. MySQL Workbench can manage database, query data,..\nFirstly, we back to the remote computer, Open MySQL Workbench You will prompt like image In Database section, select Manage Connections Some information that you have to fill, that can take it from Secretes manager. From home console, go to Secrete manager and chose Secretes section. Click RDSSecreteForApp In the Secrete value, then go to Retrieve secrete value. Some information you will take from here. In the remote computer, Click New and fill information you take from previous step. This fields are match with information in Secret value of the previous image Connection name, you can be named it with any name Hostname : host Username : username Password : password Then click Store in Vault, fill your passwork and select Ok Test connection of database Made connection succesfully to database instance. Next step, we connect to Database to create table and data for your microservice. In Database section select Connect to Database Click OK You will prompt to screen. Next step we will design database, and create data to serve my application Content Design DB for API find flight Design DB for API reserve "
},
{
	"uri": "//localhost:1313/7-configintel/",
	"title": "Intellij",
	"tags": [],
	"description": "",
	"content": "In this guide, we will discuss how to setting file application.properties of Java application project. It is to connect to database, Amazon Cognito Service, Amazon Simple Notification Service, Amazon Relational Database Service to use for creating microservices\nIn the remote computer, open Intellij IDEA Open file project that created before. Find folder with path: .It is named Airline-Booking-CodeWhisperer-PromptProject then open it. Structure of project was created to help you easy for coding Now, we move on Cloudformation to take some value of Cognito and SNS to provide for application,properties in my project to use these services. Go to Cloudformation, click Stacks and chose Cloudformation from the search results. In Outputs, attend 2 value CognitoProviderName and SNSTopic, That are respectively cognito.userpool.id and sns.arn. in aplications.properties This is my application.properties file, you need replace some value to your value spring.jpa.show-sql=true\rspring.jpa.hibernate.ddl-auto=none\rspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\rspring.datasource.url=cw-sample.c7aqu420y9mw.us-east-1.rds.amazonaws.com\rspring.datasource.username=admin\rspring.datasource.password=MqzSH]1ce%\rspring.datasource.driver-class-name=com.mysql.jdbc.Driver\rserver.port = 8090\raws.region=us-east-1\rsecretmanager.key=RDSSecretForApp\rcognito.userpool.id=cognito-idp.us-east-1.amazonaws.com/us-east-1_PMOsRPK3Y\rsns.arn=arn:aws:sns:us-east-1:992382617520:reservation-success Take some information and replace with that 1, 2, 3: information that you connect to MySQL Workbench, you can retake it from Secretes manager 4: your region you chose to do this workshop 5: RDS key : credential of database 6, 7: We take it from the previous step "
},
{
	"uri": "//localhost:1313/8-api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": "1. API tìm chuyến bay We will build an API to find flight based on departure date, departure airport. The API return list of flight with details about flights, seats and price information. API call are secured by JWT token. User login to the Cognito Hosted UI to get JWT token to call API. API verified and then allow the requested action to be perform 2. API đặt chỗ We will build a Reservation API, that fuction of API to reserve flight. API will take passenger details, reservation details and details of the flight as input. Flight ID return from Find flight API call will provide as input to this API. API call are secured by JWT token. Take it like you got it when call API Find Flight Nội dung: API tìm chuyến bay API API đặt chỗ API "
},
{
	"uri": "//localhost:1313/9-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources From home console, go to Cloudformation and then delete Stack, need about 30 minutes to delete stack. It will delete all resources.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]