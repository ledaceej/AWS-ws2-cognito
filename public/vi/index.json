[
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu chung",
	"tags": [],
	"description": "",
	"content": "Giới thiệu vài dịch vụ Amazon Trong workshop này, chúng ta sẽ dựng ứng dụng mircoservice Java springboot. Tại đây, không chỉ hướng dẫn dựng một ứng dụng mà ứng dụng còn được tích hợp nhiều dịch vụ của AWS để kiểm tra ứng dụng từ đầu đến cuối\nCó một vài service bạn sẽ sử dụng trong workshop này. Đó là Cognito, SNS, Secrete Manager\nSecrete Manager giúp ta quản lý, khôi phục và thay đổi xác thực của database, API keys\u0026hellip; xuyên suốt vòng đời của chúng Cognito giúp bạn triển khai xác thực người dùng, quản lý truy cập vào trong ứng dụng web và mobile. Bạn có thể nhanh chóng tạo user, truy cập tới ứng dụng trong vài phút Simple Notification Service gửi thông báo bằng 2 cách là A2A và A2P. A2A cung cấp Trong các section tiếp theo, chúng ta sẽ tìm hiểu về concept của ứng dụng kiến trúc microservice và tích hợp các dịch vụ của AWS\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Start with Cognito, SNS, Secrete",
	"tags": [],
	"description": "",
	"content": "Java application with Amazon Service Overview Trong workshop này, bạn sẽ học được cách xây dựng một ứng dụng java trên cloud và kết hợp cấc dịch vụ như Cognito, SNS với úng dụng để xác thực người dùng và gửi thông báo khi đã thực hiện api thành công\nNội dung Introduction Cloudformation Connect to EC2 Setting Cognito Configure SNS topic Configure DB Configure Intellij API Resource Cleanup "
},
{
	"uri": "//localhost:1313/vi/8-api/8.1-apifindflight/8.1.1-writeapi/",
	"title": "Viết API",
	"tags": [],
	"description": "",
	"content": "Viết API Tạo model class để làm việc với các bảng airport và flight. Mở Airport.java thêm đoạn code dưới đấy package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport lombok.NoArgsConstructor;\rimport javax.persistence.*;\r/* Create an Entity class Airport mapped to table airport with following 4 attributes:\rairportCode as id, airportName, airportCity and airportLocale.\rThey should be mapped to database columns with _ as separator.*/\r@Entity\r@Table(name = \u0026#34;airport\u0026#34;)\r@Accessors(chain = true)\r@NoArgsConstructor\rpublic class Airport {\rpublic String getAirportCode() {\rreturn airportCode;\r}\rpublic void setAirportCode(String airportCode) {\rthis.airportCode = airportCode;\r}\rpublic String getAirportName() {\rreturn airportName;\r}\rpublic void setAirportName(String airportName) {\rthis.airportName = airportName;\r}\rpublic String getAirportCity() {\rreturn airportCity;\r}\rpublic void setAirportCity(String airportCity) {\rthis.airportCity = airportCity;\r}\rpublic String getAirportLocale() {\rreturn airportLocale;\r}\rpublic void setAirportLocale(String airportLocale) {\rthis.airportLocale = airportLocale;\r}\r@Id\r@Column(name = \u0026#34;airport_code\u0026#34;)\rprivate String airportCode;\r@Column(name = \u0026#34;airport_name\u0026#34;)\rprivate String airportName;\r@Column(name = \u0026#34;airport_city\u0026#34;)\rprivate String airportCity;\r@Column(name = \u0026#34;airport_locale\u0026#34;)\rprivate String airportLocale;\r} Mở Flight.java thêm đoạn code dưới đây Tạo Data Transfer Object(DTO) để kết hợp thông tin của chuyến bay và bảng airport Mở FlightDetails.java thêm đoạn code dưới đây package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport lombok.NoArgsConstructor;\rimport javax.persistence.*;\r@Entity\r@Table(name = \u0026#34;flight\u0026#34;)\r@Accessors(chain = true)\r@NoArgsConstructor\rpublic class Flight {\r@Id\r@GeneratedValue(strategy = GenerationType.IDENTITY)\r@Column(name = \u0026#34;id\u0026#34;)\rprivate int id;\rpublic int getId() {\rreturn id;\r}\rpublic void setId(int id) {\rthis.id = id;\r}\rpublic String getDepartureDate() {\rreturn departureDate;\r}\rpublic void setDepartureDate(String departureDate) {\rthis.departureDate = departureDate;\r}\rpublic String getDepartureTime() {\rreturn departureTime;\r}\rpublic void setDepartureTime(String departureTime) {\rthis.departureTime = departureTime;\r}\rpublic String getDepartureAirportCode() {\rreturn departureAirportCode;\r}\rpublic void setDepartureAirportCode(String departureAirportCode) {\rthis.departureAirportCode = departureAirportCode;\r}\rpublic String getArrivalDate() {\rreturn arrivalDate;\r}\rpublic void setArrivalDate(String arrivalDate) {\rthis.arrivalDate = arrivalDate;\r}\rpublic String getArrivalTime() {\rreturn arrivalTime;\r}\rpublic void setArrivalTime(String arrivalTime) {\rthis.arrivalTime = arrivalTime;\r}\rpublic String getArrivalAirportCode() {\rreturn arrivalAirportCode;\r}\rpublic void setArrivalAirportCode(String arrivalAirportCode) {\rthis.arrivalAirportCode = arrivalAirportCode;\r}\rpublic String getFlightNumber() {\rreturn flightNumber;\r}\rpublic void setFlightNumber(String flightNumber) {\rthis.flightNumber = flightNumber;\r}\rpublic String getFlightDuration() {\rreturn flightDuration;\r}\rpublic void setFlightDuration(String flightDuration) {\rthis.flightDuration = flightDuration;\r}\rpublic double getTicketPrice() {\rreturn ticketPrice;\r}\rpublic void setTicketPrice(double ticketPrice) {\rthis.ticketPrice = ticketPrice;\r}\rpublic String getTicketCurrency() {\rreturn ticketCurrency;\r}\rpublic void setTicketCurrency(String ticketCurrency) {\rthis.ticketCurrency = ticketCurrency;\r}\rpublic int getSeatCapacity() {\rreturn seatCapacity;\r}\rpublic void setSeatCapacity(int seatCapacity) {\rthis.seatCapacity = seatCapacity;\r}\rpublic int getSeatAvailable() {\rreturn seatAvailable;\r}\rpublic void setSeatAvailable(int seatAvailable) {\rthis.seatAvailable = seatAvailable;\r}\r@Column(name = \u0026#34;departure_date\u0026#34;)\rprivate String departureDate;\r@Column(name = \u0026#34;departure_time\u0026#34;)\rprivate String departureTime;\r@Column(name = \u0026#34;departure_airport_code\u0026#34;)\rprivate String departureAirportCode;\r@Column(name = \u0026#34;arrival_date\u0026#34;)\rprivate String arrivalDate;\r@Column(name = \u0026#34;arrival_time\u0026#34;)\rprivate String arrivalTime;\r@Column(name = \u0026#34;arrival_airport_code\u0026#34;)\rprivate String arrivalAirportCode;\r@Column(name = \u0026#34;flight_number\u0026#34;)\rprivate String flightNumber;\r@Column(name = \u0026#34;flight_duration\u0026#34;)\rprivate String flightDuration;\r@Column(name = \u0026#34;ticket_price\u0026#34;)\rprivate double ticketPrice;\r@Column(name = \u0026#34;ticket_currency\u0026#34;)\rprivate String ticketCurrency;\r@Column(name = \u0026#34;seat_capacity\u0026#34;)\rprivate int seatCapacity;\r@Column(name = \u0026#34;seat_available\u0026#34;)\rprivate int seatAvailable;\r@Override\rpublic String toString() {\rreturn \u0026#34;Flight{\u0026#34; +\r\u0026#34;id=\u0026#34; + id +\r\u0026#34;, departureDate=\u0026#39;\u0026#34; + departureDate + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, departureTime=\u0026#39;\u0026#34; + departureTime + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, departureAirportCode=\u0026#39;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, arrivalDate=\u0026#39;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, arrivalTime=\u0026#39;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, arrivalAirportCode=\u0026#39;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, flightNumber=\u0026#39;\u0026#34; + flightNumber + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, flightDuration=\u0026#39;\u0026#34; + flightDuration + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, ticketPrice=\u0026#34; + ticketPrice +\r\u0026#34;, ticketCurrency=\u0026#39;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, seatCapacity=\u0026#34; + seatCapacity +\r\u0026#34;, seatAvailable=\u0026#34; + seatAvailable +\r\u0026#39;}\u0026#39;;\r}\rpublic String toJson() {\rreturn \u0026#34;{\u0026#34; +\r\u0026#34;\\\u0026#34;id\\\u0026#34;:\u0026#34; + id +\r\u0026#34;, \\\u0026#34;departureDate\\\u0026#34;:\\\u0026#34;\u0026#34; + departureDate + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;departureTime\\\u0026#34;:\\\u0026#34;\u0026#34; + departureTime + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;departureAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;arrivalDate\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;arrivalTime\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;arrivalAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;flightNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + flightNumber + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;flightDuration\\\u0026#34;:\\\u0026#34;\u0026#34; + flightDuration + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\u0026#34; + ticketPrice +\r\u0026#34;, \\\u0026#34;ticketCurrency\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;seatCapacity\\\u0026#34;:\u0026#34; + seatCapacity +\r\u0026#34;, \\\u0026#34;seatAvailable\\\u0026#34;:\u0026#34; + seatAvailable +\r\u0026#39;}\u0026#39;;\r}\r} Dựng JPA Repository Interface để truy cập vào dữ liệu của bảng trong MySQL Mở AirportRepository.java thêm đoạn code dưới đây package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Airport;\rimport org.springframework.stereotype.Repository;\rimport org.springframework.data.jpa.repository.JpaRepository;\r@Repository\rpublic interface AirportRepository extends JpaRepository\u0026lt;Airport, String\u0026gt; {\rAirport findByAirportCode(String airportCode);\r} Mở FlightRepository.java thêm đoạn code dưới đây package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Flight;\rimport org.springframework.stereotype.Repository;\rimport org.springframework.data.jpa.repository.JpaRepository;\r@Repository\rpublic interface FlightRepository extends JpaRepository\u0026lt;Flight, Integer\u0026gt; {\rIterable\u0026lt;Flight\u0026gt; findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(String departureDate, String departureAirportCode, String arrivalAirportCode);\rFlight findById(int id);\r} Dựng một Configuration Class to chủ động cấu hình database credentials từ AWS Secrets Manager. Mở DataSourceConfig.java thêm đoạn code dưới đây package com.airlines.catalog.config;\rimport com.fasterxml.jackson.core.JsonProcessingException;\rimport org.springframework.beans.factory.annotation.Value;\rimport org.springframework.context.annotation.Bean;\rimport org.springframework.context.annotation.Configuration;\rimport software.amazon.awssdk.regions.Region;\rimport software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;\rimport software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;\rimport software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;\rimport software.amazon.awssdk.services.secretsmanager.model.SecretsManagerException;\rimport org.springframework.boot.jdbc.DataSourceBuilder;\rimport com.fasterxml.jackson.core.JsonParser;\rimport com.fasterxml.jackson.databind.JsonNode;\rimport com.fasterxml.jackson.databind.ObjectMapper;\rimport javax.sql.DataSource;\r/*Create public class DataSourceConfig and 2 member variables awsRegion and secretName.\rAutowire these variables with aws.region and secretmanager.key from application.properties file.\r*/\r@Configuration\rpublic class DataSourceConfig {\r@Value(\u0026#34;${aws.region}\u0026#34;)\rprivate String awsRegion;\r@Value(\u0026#34;${secretmanager.key}\u0026#34;)\rprivate String secretName;\r/* Create a private getSecret method that connects to AWS Secrets Manager and gets the secret string using\rmember variables awsRegion and secretName. Catch and throw Secret Manager exceptions */\rprivate String getSecret() {\rRegion region = Region.of(awsRegion);\rSecretsManagerClient client = SecretsManagerClient.builder()\r.region(region)\r.build();\rGetSecretValueRequest valueRequest = GetSecretValueRequest.builder()\r.secretId(secretName)\r.build();\rGetSecretValueResponse valueResponse = client.getSecretValue(valueRequest);\rreturn valueResponse.secretString();\r}\r/* Create a method getDataSource to build the datasource object.\rCall the getSecret function. Parse the returned JSON string to extract host, port, db,\rusername and password. Then configure the mysql url, username and password of the datasource object.\rReturn the datasource object. Throw any Json Processing exception.\r*/\r@Bean\rpublic DataSource getDataSource() throws JsonProcessingException {\rDataSourceBuilder\u0026lt;?\u0026gt; dataSourceBuilder = DataSourceBuilder.create();\rString secret = getSecret();\rObjectMapper objectMapper = new ObjectMapper();\robjectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\rJsonNode jsonNode = objectMapper.readTree(secret);\rString host = jsonNode.get(\u0026#34;host\u0026#34;).asText();\rint port = jsonNode.get(\u0026#34;port\u0026#34;).asInt();\rString db = jsonNode.get(\u0026#34;db\u0026#34;).asText();\rString username = jsonNode.get(\u0026#34;username\u0026#34;).asText();\rString password = jsonNode.get(\u0026#34;password\u0026#34;).asText();\rdataSourceBuilder.url(\u0026#34;jdbc:mysql://\u0026#34; + host + \u0026#34;:\u0026#34; + port + \u0026#34;/\u0026#34; + db);\rdataSourceBuilder.username(username);\rdataSourceBuilder.password(password);\rreturn dataSourceBuilder.build();\r}\r} Dựng service class sẽ lấy dữ liệu từ bảng flight để lấy thông tin về các chuyến bay khả dụng dựa vào tham số truyền vào Mở FlightDetailsService.java thêm đoạn code dưới đây package com.airlines.catalog.service;\rimport com.airlines.catalog.dto.FlightDetails;\rimport com.airlines.catalog.model.Airport;\rimport com.airlines.catalog.model.Flight;\rimport com.airlines.catalog.repository.AirportRepository;\rimport com.airlines.catalog.repository.FlightRepository;\rimport org.springframework.beans.factory.annotation.Autowired;\rimport org.springframework.stereotype.Service;\rimport java.util.ArrayList;\rimport java.util.List;\r/* Create FlightDetailsService class */\r@Service\rpublic class FlightDetailsService {\r@Autowired\rFlightRepository flightRepository;\r@Autowired\rAirportRepository airportRepository;\r/* Create private method populateFlightDetails method which takes flight, arrival airport and departure airport\ras input parameters and returns flightDetails object. */\rprivate FlightDetails populateFlightDetails(Flight flight, Airport arrivalAirport, Airport departureAirport) {\r/* Match and Assign all the attributes from flight, arrivalAirport and departureAirport object\rto flightDetails object. */\rFlightDetails flightDetails = new FlightDetails();\rflightDetails.setFlightId(flight.getId());\rflightDetails.setDepartureDate(flight.getDepartureDate());\rflightDetails.setDepartureTime(flight.getDepartureTime());\rflightDetails.setArrivalDate(flight.getArrivalDate());\rflightDetails.setArrivalTime(flight.getArrivalTime());\rflightDetails.setArrivalAirportCode(arrivalAirport.getAirportCode());\rflightDetails.setArrivalAirportName(arrivalAirport.getAirportName());\rflightDetails.setArrivalAirportCity(arrivalAirport.getAirportCity());\rflightDetails.setArrivalAirportLocale(arrivalAirport.getAirportLocale());\rflightDetails.setDepartureAirportCode(departureAirport.getAirportCode());\rflightDetails.setDepartureAirportName(departureAirport.getAirportName());\rflightDetails.setDepartureAirportCity(departureAirport.getAirportCity());\rflightDetails.setDepartureAirportLocale(departureAirport.getAirportLocale());\rflightDetails.setFlightDuration(flight.getFlightDuration());\rflightDetails.setTicketPrice(flight.getTicketPrice());\rflightDetails.setTicketCurrency(flight.getTicketCurrency());\rflightDetails.setSeatAvailable(flight.getSeatAvailable());\rflightDetails.setFlightNumber(flight.getFlightNumber());\rreturn flightDetails;\r}\rpublic List\u0026lt;FlightDetails\u0026gt; findFlights(String departureDate, String departureAirportCode,\rString arrivalAirportCode, FlightRepository flightRepository,\rAirportRepository airportRepository) {\rIterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode);\rList\u0026lt;FlightDetails\u0026gt; flightDetailsList = new ArrayList\u0026lt;\u0026gt;();\rfor (Flight flight : flights) {\rAirport departureAirport = airportRepository.findByAirportCode(flight.getDepartureAirportCode());\rAirport arrivalAirport = airportRepository.findByAirportCode(flight.getArrivalAirportCode());\rFlightDetails flightDetails = populateFlightDetails(flight, arrivalAirport, departureAirport);\rflightDetailsList.add(flightDetails);\r}\rreturn flightDetailsList;\r}\r} Dựng RSA key provider class để lấy Cognito public key. Nó sử dụng để xác thực JWT Token sau đó. Mở AwsCognitoRSAKeyProvider.java thêm đoạn code dưới đây package com.airlines.catalog.controller;\rimport com.auth0.jwk.JwkException;\rimport com.auth0.jwk.JwkProvider;\rimport com.auth0.jwk.JwkProviderBuilder;\rimport com.auth0.jwt.interfaces.RSAKeyProvider;\rimport java.net.MalformedURLException;\rimport java.net.URL;\rimport java.security.interfaces.RSAPrivateKey;\rimport java.security.interfaces.RSAPublicKey;\r/* create a class to implement methods for public key verification.\rURL is provided as input\rAdd other mandatory methods to implement the interface. Handle all the exceptions.\r*/\rpublic class AwsCognitoRSAKeyProvider implements RSAKeyProvider {\rprivate final JwkProvider provider;\rpublic AwsCognitoRSAKeyProvider(String url) throws MalformedURLException {\rprovider = new JwkProviderBuilder(new URL(url)).build();\r}\r@Override\rpublic RSAPublicKey getPublicKeyById(String kid) {\rtry {\rreturn (RSAPublicKey) provider.get(kid).getPublicKey();\r} catch (JwkException e) {\re.printStackTrace();\r}\rreturn null;\r}\r@Override\rpublic RSAPrivateKey getPrivateKey() {\rreturn null;\r}\r@Override\rpublic String getPrivateKeyId() {\rreturn null;\r}\r} Dựng exception handler để giải quyết Cognito authentication lỗi và định nghĩa thông điệp của ứng dụng cho những lần gặp exception. Mở AuthenticationException.java thêm đoạn code dưới đây package com.airlines.catalog.exception;\rimport com.auth0.jwt.exceptions.InvalidClaimException;\rimport com.auth0.jwt.exceptions.JWTDecodeException;\rimport com.auth0.jwt.exceptions.TokenExpiredException;\rimport java.net.CacheRequest;\rimport java.net.MalformedURLException;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport lombok.Getter;\r/*Create a public class AuthenticationException that extends Runtime Exception with member variable\rresponse entity and constructor with Exception as input parameter.\rCheck for different types of JWT exceptions\rStore the message in member variable response entity.\r*/\r@Getter\rpublic class AuthenticationException extends RuntimeException {\rprivate ResponseEntity responseEntity;\rpublic AuthenticationException(Exception e) {\rif (e instanceof JWTDecodeException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Token\u0026#34;, HttpStatus.UNAUTHORIZED);\r} else if (e instanceof TokenExpiredException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Token Expired\u0026#34;, HttpStatus.UNAUTHORIZED);\r} else if (e instanceof InvalidClaimException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Claim\u0026#34;, HttpStatus.UNAUTHORIZED);\r} else if (e instanceof MalformedURLException) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid URL\u0026#34;, HttpStatus.UNAUTHORIZED);\r}\r}\r} Dựng controller class cho thực thi API Mở FlightReservation.java thêm đoạn code dưới đây package com.airlines.catalog.controller;\rimport java.nio.channels.ScatteringByteChannel;\rimport java.util.List;\rimport com.airlines.catalog.dto.FlightDetails;\rimport com.airlines.catalog.exception.AuthenticationException;\rimport com.airlines.catalog.repository.AirportRepository;\rimport com.airlines.catalog.repository.FlightRepository;\rimport com.airlines.catalog.service.FlightDetailsService;\rimport com.auth0.jwt.JWT;\rimport com.auth0.jwt.JWTVerifier;\rimport com.auth0.jwt.algorithms.Algorithm;\rimport com.auth0.jwt.interfaces.DecodedJWT;\rimport org.springframework.beans.factory.annotation.Autowired;\rimport org.springframework.beans.factory.annotation.Value;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport org.springframework.web.bind.annotation.GetMapping;\rimport org.springframework.web.bind.annotation.RequestHeader;\rimport org.springframework.web.bind.annotation.RequestParam;\rimport org.springframework.web.bind.annotation.RestController;\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport com.airlines.catalog.service.FlightBooking;\rimport com.airlines.catalog.dto.ReservationDetails;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.web.bind.annotation.*;\rimport software.amazon.awssdk.regions.Region;\rimport javax.validation.Valid;\r@RestController\rpublic class FlightReservation {\r@Autowired\rFlightRepository flightresultsRepository;\r@Autowired\rAirportRepository airportresultsRepository;\r@Autowired\rFlightDetailsService FlightDetailsService;\r@Autowired\rPassengerRepository passengerRepository;\r@Autowired\rReservationRepository reservationRepository;\r@Autowired\rFlightBooking flightBooking;\r@Value(\u0026#34;${cognito.userpool.id}\u0026#34;)\rprivate String cognitoUserPoolId;\r@Value(\u0026#34;${aws.region}\u0026#34;)\rprivate String awsRegion;\r@Value(\u0026#34;${sns.arn}\u0026#34;)\rprivate String snsTopicArn;\r/* Create a private method verifyToken to verify JWT token with input parameters as\rCognito user pool id, AWS region and token string. Function returns a Boolean.\rConstruct the Cognito well known url and then verify the token using RSA Algorithm.\rcatch all Exception throw new authenticationException.*/\rprivate Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException {\rtry {\rSystem.out.println(\u0026#34;token=\u0026#34; + token);\rString cognitoWellKnownUrl = \u0026#34;https://\u0026#34;+ cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;;\rAlgorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl));\rJWTVerifier verifier = JWT.require(algorithm).build();\rDecodedJWT decodedJWT = verifier.verify(token);\rreturn true;\r} catch (Exception e) {\rthrow new AuthenticationException(e);\r}\r}\r/* Create a rest controller getFlightDetails to get flight details with HTTP GET Method ,\r/flight path and request parameters as departure date, departure airport code and arrival airport code\rJWT Token in the Authorization Header.\rRest controller returns a ResponseEntity of string.\r*/\r@GetMapping(\u0026#34;/flight\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate,\r@RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode,\r@RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException {\r/* Call verifyToken method, catch authentication exception and return the responseEntity\rif token is valid and call the findFlights method in FlightDetailsService class\rwith input parameters departure date, departure airport code,\rarrival airport code, flightResultsRepository and airportResultsRepository.\rIf flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;.\rIf authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden\r*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\rList\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository);\rif (flights.size() \u0026gt; 0) {\rreturn new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK);\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK);\r}\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN);\r}\r} catch (AuthenticationException e) {\rreturn e.getResponseEntity();\r}\r}\r/* Create a rest controller bookFlight to get flight details with HTTP POST Method ,\r/reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string.\rAuthorization token is passed in the header of the request.\r*/\r@PostMapping(\u0026#34;/reserve\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; bookFlight(@RequestBody @Valid ReservationDetails reservationDetails,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization)\rthrows AuthenticationException, FlightNotFoundException, RequestedSeatsNotAvailable {\rResponseEntity\u0026lt;String\u0026gt; responseEntity = null;\r/*validate the token by calling verifyToken method in a try catch block.\rCatch authenticationExceptionHandler exception return the response entity object\rfrom the exception object*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\r/* create passenger object assign first name, last name and gender of passenger object from reservationDetails object */\rPassenger passenger = new Passenger();\rpassenger.setFirstName(reservationDetails.getFirstName());\rpassenger.setLastName(reservationDetails.getLastName());\rpassenger.setGender(reservationDetails.getGender());\r//Check the age from reservationDetails object and populate adult field\rif (reservationDetails.getAge() \u0026gt;= 18) {\rpassenger.setAdult(true);\r}\r/* create reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail,\rcontactNumber, reservationStatus, paymentStatus, paymentMode */\rReservation reservation = new Reservation();\rreservation.setFlightId(reservationDetails.getFlightId());\rreservation.setTravelClass(reservationDetails.getTravelClass());\rreservation.setTicketPrice(reservationDetails.getTicketPrice());\rreservation.setCurrencyCode(reservationDetails.getCurrencyCode());\rreservation.setContactEmail(reservationDetails.getContactEmail());\rreservation.setContactNumber(reservationDetails.getContactNumber());\rreservation.setReservationStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentMode(\u0026#34;Cash\u0026#34;);\r/* set the date reservation date in yyyy-MM-dd format and\rreservation time in HH:mm:ss format for current date and time*/\rreservation.setReservationDate(java.time.LocalDate.now().toString());\rreservation.setReservationTime(java.time.LocalTime.now().toString());\rBoolean result;\rtry {\rint noOfPassengers = 1;\rRegion region = Region.of(awsRegion);\rresult = flightBooking.reserveFlight(passenger, reservation, passengerRepository,\rreservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region);\r}\rcatch (FlightNotFoundException e) {\rreturn e.getResponseEntity();\r}\rcatch (RequestedSeatsNotAvailable e) {\rreturn e.getResponseEntity();\r}\r/* check if the reservation is successful\rreturn response entity object with HTTP status of ok and\rmessage \u0026#34;reservation made successfully\u0026#34; appending the booking Reference\rif the reservation is not successful\rreturn response entity object with HTTP status of bad request */\rif (result) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation made successfully. Booking Reference: \u0026#34; + reservation.getBookingReference(), HttpStatus.OK);\r}\relse {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation failed\u0026#34;, HttpStatus.BAD_REQUEST);\r}\r}\r} catch (AuthenticationException e) {\rresponseEntity = e.getResponseEntity();\r}\rreturn responseEntity;\r}\r} "
},
{
	"uri": "//localhost:1313/vi/8-api/8.2-apireserve/8.2.1-writeapi/",
	"title": "Viết API",
	"tags": [],
	"description": "",
	"content": "Viết API Tạo model class Mở Passenger.java dán đoạn code sau đây package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.NoArgsConstructor;\rimport lombok.experimental.Accessors;\rimport javax.persistence.*;\rimport javax.persistence.GenerationType;\r/* Build a Passenger Entity class with columns passengerId as Identity auto generated, adult, gender, firstName,\rlastName mapped to passenger table, column names sepetated by _*/\r@Getter\r@Setter\r@NoArgsConstructor\r@Accessors(chain = true)\r@Entity\r@Table(name = \u0026#34;passenger\u0026#34;)\rpublic class Passenger {\r@Id\r@GeneratedValue(strategy = GenerationType.IDENTITY)\r@Column(name = \u0026#34;passenger_id\u0026#34;)\rprivate int passengerId;\r@Column(name = \u0026#34;adult\u0026#34;)\rprivate boolean adult;\r@Column(name = \u0026#34;gender\u0026#34;)\rprivate String gender;\r@Column(name = \u0026#34;first_name\u0026#34;)\rprivate String firstName;\r@Column(name = \u0026#34;last_name\u0026#34;)\rprivate String lastName;\r//Create a tostring method to convert the object to string\r@Override\rpublic String toString() {\rreturn \u0026#34;Passenger{\u0026#34; +\r\u0026#34;passengerId=\u0026#34; + passengerId +\r\u0026#34;, adult=\u0026#34; + adult +\r\u0026#34;, gender=\u0026#39;\u0026#34; + gender + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, firstName=\u0026#39;\u0026#34; + firstName + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, lastName=\u0026#39;\u0026#34; + lastName + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\rpublic int getPassengerId() {\rreturn passengerId;\r}\rpublic void setPassengerId(int passengerId) {\rthis.passengerId = passengerId;\r}\rpublic boolean isAdult() {\rreturn adult;\r}\rpublic void setAdult(boolean adult) {\rthis.adult = adult;\r}\rpublic String getGender() {\rreturn gender;\r}\rpublic void setGender(String gender) {\rthis.gender = gender;\r}\rpublic String getFirstName() {\rreturn firstName;\r}\rpublic void setFirstName(String firstName) {\rthis.firstName = firstName;\r}\rpublic String getLastName() {\rreturn lastName;\r}\rpublic void setLastName(String lastName) {\rthis.lastName = lastName;\r}\r//Create a toJson method to convert the object to Json String\rpublic String toJson() {\rreturn \u0026#34;{\u0026#34; +\r\u0026#34;\\\u0026#34;passengerId\\\u0026#34;:\u0026#34; + passengerId +\r\u0026#34;, \\\u0026#34;adult\\\u0026#34;:\u0026#34; + adult +\r\u0026#34;, \\\u0026#34;gender\\\u0026#34;:\\\u0026#34;\u0026#34; + gender + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;firstName\\\u0026#34;:\\\u0026#34;\u0026#34; + firstName + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;lastName\\\u0026#34;:\\\u0026#34;\u0026#34; + lastName + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\r} Mở Reservation.java dán đoạn code sau đây package com.airlines.catalog.model;\rimport lombok.Getter;\rimport lombok.NoArgsConstructor;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport javax.persistence.*;\r/* Build a Reservation Entity class mapped to database table reservation\rAttributes for the class:\rbookingReference as long identity autogenerated,\rpassengerId, flightId, reservationDate, reservationTime,reservationStatus, travelClass,\rticketPrice as double, currencyCode, paymentStatus, paymentMode, contactNumber,\rcontactEmail mapped to column names seperated by _ */\r@Getter\r@Setter\r@NoArgsConstructor\r@Accessors(chain = true)\r@Entity\r@Table(name = \u0026#34;reservation\u0026#34;)\rpublic class Reservation {\r@Id\r@GeneratedValue(strategy = GenerationType.IDENTITY)\r@Column(name = \u0026#34;booking_reference\u0026#34;)\rprivate long bookingReference;\r@Column(name = \u0026#34;passenger_id\u0026#34;)\rprivate int passengerId;\r@Column(name = \u0026#34;flight_id\u0026#34;)\rprivate int flightId;\r@Column(name = \u0026#34;reservation_date\u0026#34;)\rprivate String reservationDate;\r@Column(name = \u0026#34;reservation_time\u0026#34;)\rprivate String reservationTime;\r@Column(name = \u0026#34;reservation_status\u0026#34;)\rprivate String reservationStatus;\r@Column(name = \u0026#34;travel_class\u0026#34;)\rprivate String travelClass;\r@Column(name = \u0026#34;ticket_price\u0026#34;)\rprivate double ticketPrice;\r@Column(name = \u0026#34;currency_code\u0026#34;)\rprivate String currencyCode;\r@Column(name = \u0026#34;payment_status\u0026#34;)\rprivate String paymentStatus;\r@Column(name = \u0026#34;payment_mode\u0026#34;)\rprivate String paymentMode;\r@Column(name = \u0026#34;contact_number\u0026#34;)\rprivate String contactNumber;\r@Column(name = \u0026#34;contact_email\u0026#34;)\rprivate String contactEmail;\r//Create a tostring method to convert the object to string\r@Override\rpublic String toString() {\rreturn \u0026#34;Reservation{\u0026#34; +\r\u0026#34;bookingReference=\u0026#34; + bookingReference +\r\u0026#34;, passengerId=\u0026#34; + passengerId +\r\u0026#34;, flightId=\u0026#34; + flightId +\r\u0026#34;, reservationDate=\u0026#39;\u0026#34; + reservationDate + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, reservationTime=\u0026#39;\u0026#34; + reservationTime + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, reservationStatus=\u0026#39;\u0026#34; + reservationStatus + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, travelClass=\u0026#39;\u0026#34; + travelClass + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, ticketPrice=\u0026#34; + ticketPrice +\r\u0026#34;, currencyCode=\u0026#39;\u0026#34; + currencyCode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, paymentStatus=\u0026#39;\u0026#34; + paymentStatus + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, paymentMode=\u0026#39;\u0026#34; + paymentMode + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, contactNumber=\u0026#39;\u0026#34; + contactNumber + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#34;, contactEmail=\u0026#39;\u0026#34; + contactEmail + \u0026#39;\\\u0026#39;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\r//Create a toJson method to convert the object to Json String\rpublic String toJson() {\rreturn \u0026#34;{\u0026#34; +\r\u0026#34;\\\u0026#34;bookingReference\\\u0026#34;:\u0026#34; + bookingReference +\r\u0026#34;, \\\u0026#34;passengerId\\\u0026#34;:\u0026#34; + passengerId +\r\u0026#34;, \\\u0026#34;flightId\\\u0026#34;:\u0026#34; + flightId +\r\u0026#34;, \\\u0026#34;reservationDate\\\u0026#34;:\\\u0026#34;\u0026#34; + reservationDate + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;reservationTime\\\u0026#34;:\\\u0026#34;\u0026#34; + reservationTime + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;reservationStatus\\\u0026#34;:\\\u0026#34;\u0026#34; + reservationStatus + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;travelClass\\\u0026#34;:\\\u0026#34;\u0026#34; + travelClass + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\u0026#34; + ticketPrice +\r\u0026#34;, \\\u0026#34;currencyCode\\\u0026#34;:\\\u0026#34;\u0026#34; + currencyCode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;paymentStatus\\\u0026#34;:\\\u0026#34;\u0026#34; + paymentStatus + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;paymentMode\\\u0026#34;:\\\u0026#34;\u0026#34; + paymentMode + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;contactNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + contactNumber + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#34;, \\\u0026#34;contactEmail\\\u0026#34;:\\\u0026#34;\u0026#34; + contactEmail + \u0026#39;\\\u0026#34;\u0026#39; +\r\u0026#39;}\u0026#39;;\r}\rpublic long getBookingReference() {\rreturn bookingReference;\r}\rpublic void setBookingReference(long bookingReference) {\rthis.bookingReference = bookingReference;\r}\rpublic int getPassengerId() {\rreturn passengerId;\r}\rpublic void setPassengerId(int passengerId) {\rthis.passengerId = passengerId;\r}\rpublic int getFlightId() {\rreturn flightId;\r}\rpublic void setFlightId(int flightId) {\rthis.flightId = flightId;\r}\rpublic String getReservationDate() {\rreturn reservationDate;\r}\rpublic void setReservationDate(String reservationDate) {\rthis.reservationDate = reservationDate;\r}\rpublic String getReservationTime() {\rreturn reservationTime;\r}\rpublic void setReservationTime(String reservationTime) {\rthis.reservationTime = reservationTime;\r}\rpublic String getReservationStatus() {\rreturn reservationStatus;\r}\rpublic void setReservationStatus(String reservationStatus) {\rthis.reservationStatus = reservationStatus;\r}\rpublic String getTravelClass() {\rreturn travelClass;\r}\rpublic void setTravelClass(String travelClass) {\rthis.travelClass = travelClass;\r}\rpublic double getTicketPrice() {\rreturn ticketPrice;\r}\rpublic void setTicketPrice(double ticketPrice) {\rthis.ticketPrice = ticketPrice;\r}\rpublic String getCurrencyCode() {\rreturn currencyCode;\r}\rpublic void setCurrencyCode(String currencyCode) {\rthis.currencyCode = currencyCode;\r}\rpublic String getPaymentStatus() {\rreturn paymentStatus;\r}\rpublic void setPaymentStatus(String paymentStatus) {\rthis.paymentStatus = paymentStatus;\r}\rpublic String getPaymentMode() {\rreturn paymentMode;\r}\rpublic void setPaymentMode(String paymentMode) {\rthis.paymentMode = paymentMode;\r}\rpublic String getContactNumber() {\rreturn contactNumber;\r}\rpublic void setContactNumber(String contactNumber) {\rthis.contactNumber = contactNumber;\r}\rpublic String getContactEmail() {\rreturn contactEmail;\r}\rpublic void setContactEmail(String contactEmail) {\rthis.contactEmail = contactEmail;\r}\r} Tạo một ReservationDetails DTO class sẽ được dùng để kiểm tra tất cả và giữ tham số đầu vào được cung cấp tới API đặt chuyến bay. Mở ReservationDetails.java dán đoạn code sau đây package com.airlines.catalog.dto;\rimport lombok.Getter;\rimport lombok.NoArgsConstructor;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\rimport javax.validation.constraints.*;\r/* Create a class ReservationDetails with attributes\rfirstName not blank, lastName not blank,\rgender, age between 1 and 120, flightId as int, travelClass not blank,\rticketPrice as double and not blank,\rcurrencyCode exactly 3 characters, reservationStatus, paymentStatus,\rpaymentMode, ContactEmail should be valid email, contactNumber should be valid phone number\r*/\r@Getter\r@Setter\r@NoArgsConstructor\r@Accessors(chain = true)\rpublic class ReservationDetails {\r@NotBlank(message = \u0026#34;First Name is required\u0026#34;)\rprivate String firstName;\r@NotBlank(message = \u0026#34;Last Name is required\u0026#34;)\rprivate String lastName;\rprivate String gender;\r@Min(value = 1, message = \u0026#34;Age should be greater than 1\u0026#34;)\r@Max(value = 120, message = \u0026#34;Age should be less than 120\u0026#34;)\rprivate int age;\r@NotNull(message = \u0026#34;Flight Id is required\u0026#34;)\rprivate int flightId;\r@NotBlank(message = \u0026#34;Travel Class is required\u0026#34;)\rprivate String travelClass;\r@NotNull(message = \u0026#34;Ticket Price is required\u0026#34;)\rprivate double ticketPrice;\r@NotBlank(message = \u0026#34;Currency Code is required\u0026#34;)\r@Pattern(regexp = \u0026#34;^[A-Z]{3}$\u0026#34;, message = \u0026#34;Currency Code should be exactly 3 characters\u0026#34;)\rprivate String currencyCode;\rprivate String reservationStatus;\rprivate String paymentStatus;\rprivate String paymentMode;\r@Email(message = \u0026#34;Contact Email should be valid email\u0026#34;)\rprivate String contactEmail;\r// Phone Number should be 12 or more digits and starts with +\r@Pattern(regexp = \u0026#34;^\\\\+[0-9]{12,}$\u0026#34;, message = \u0026#34;Contact Number should be valid phone number\u0026#34;)\rprivate String contactNumber;\rpublic String getFirstName() {\rreturn firstName;\r}\rpublic void setFirstName(String firstName) {\rthis.firstName = firstName;\r}\rpublic String getLastName() {\rreturn lastName;\r}\rpublic void setLastName(String lastName) {\rthis.lastName = lastName;\r}\rpublic String getGender() {\rreturn gender;\r}\rpublic void setGender(String gender) {\rthis.gender = gender;\r}\rpublic int getAge() {\rreturn age;\r}\rpublic void setAge(int age) {\rthis.age = age;\r}\rpublic int getFlightId() {\rreturn flightId;\r}\rpublic void setFlightId(int flightId) {\rthis.flightId = flightId;\r}\rpublic String getTravelClass() {\rreturn travelClass;\r}\rpublic void setTravelClass(String travelClass) {\rthis.travelClass = travelClass;\r}\rpublic double getTicketPrice() {\rreturn ticketPrice;\r}\rpublic void setTicketPrice(double ticketPrice) {\rthis.ticketPrice = ticketPrice;\r}\rpublic String getCurrencyCode() {\rreturn currencyCode;\r}\rpublic void setCurrencyCode(String currencyCode) {\rthis.currencyCode = currencyCode;\r}\rpublic String getReservationStatus() {\rreturn reservationStatus;\r}\rpublic void setReservationStatus(String reservationStatus) {\rthis.reservationStatus = reservationStatus;\r}\rpublic String getPaymentStatus() {\rreturn paymentStatus;\r}\rpublic void setPaymentStatus(String paymentStatus) {\rthis.paymentStatus = paymentStatus;\r}\rpublic String getPaymentMode() {\rreturn paymentMode;\r}\rpublic void setPaymentMode(String paymentMode) {\rthis.paymentMode = paymentMode;\r}\rpublic String getContactEmail() {\rreturn contactEmail;\r}\rpublic void setContactEmail(String contactEmail) {\rthis.contactEmail = contactEmail;\r}\rpublic String getContactNumber() {\rreturn contactNumber;\r}\rpublic void setContactNumber(String contactNumber) {\rthis.contactNumber = contactNumber;\r}\r} Dựng JPA Repository Interfaces để truy cập dữ liệu từ bảng trong MYSQL. Chỉ định mẫu câu truy vấn để lưu dữ liệu tới bảng passenger và reservation. Mở PassengerRepository.java dán đoạn code sau đây package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Passenger;\rimport org.springframework.data.jpa.repository.JpaRepository;\rimport org.springframework.stereotype.Repository;\r/* create jpa repository interface PassengerRepository.\rAdd a method to save Passenger. */\r@Repository\rpublic interface PassengerRepository extends JpaRepository\u0026lt;Passenger, Integer\u0026gt; {\rPassenger save(Passenger passenger);\r} Mở ReservationRepository.java dán đoạn code sau đây package com.airlines.catalog.repository;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.data.jpa.repository.JpaRepository;\rimport org.springframework.stereotype.Repository;\r// Create interface ReservationRepository that extends JpaRepository.\r// Add a method to save reservation.\r@Repository\rpublic interface ReservationRepository extends JpaRepository\u0026lt;Reservation, Long\u0026gt; {\rReservation save(Reservation reservation);\r} Tạo exception handler classes để xử lý các nghiệp vụ: Invalid data inputs to the reservation API, invalid flight Id and no seats available in the flight. Mở FlightNotFoundException.java dán đoạn code sau đây package com.airlines.catalog.exception;\rimport lombok.NoArgsConstructor;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport lombok.Getter;\r/*\rCreate a public class FlightNotFoundException that extends Runtime Exception with member variable\rresponse entity.\rCreate constructor with flightId as input parameter\rException message returned should be \u0026#34;No flights found for the flight id \u0026#34; and append flight id\r*/\r@Getter\rpublic class FlightNotFoundException extends RuntimeException {\rprivate ResponseEntity\u0026lt;String\u0026gt; responseEntity;\rpublic FlightNotFoundException(long flightId) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found for the flight id \u0026#34; + flightId, HttpStatus.NOT_FOUND);\r}\r} Mở RequestedSeatsNotAvailable.java dán đoạn code sau đây package com.airlines.catalog.exception;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport lombok.Getter;\rimport lombok.Setter;\rimport lombok.experimental.Accessors;\r/*\rCreate a public class RequestedSeatsNotAvailable that extends Runtime Exception with member variable\rresponse entity, constructor has no arguments\rexception message returned should be \u0026#34;Seats not available. Reservation could not be made\u0026#34;\r*/\r@Getter\rpublic class RequestedSeatsNotAvailable extends RuntimeException {\rprivate ResponseEntity\u0026lt;String\u0026gt; responseEntity;\rpublic RequestedSeatsNotAvailable() {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Seats not available. Reservation could not be made\u0026#34;, HttpStatus.NOT_FOUND);\r}\r} Mở GlobalExceptionHandler.java dán đoạn code sau đây package com.airlines.catalog.exception;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport org.springframework.validation.FieldError;\rimport org.springframework.web.bind.MethodArgumentNotValidException;\rimport org.springframework.web.bind.annotation.ExceptionHandler;\rimport org.springframework.web.bind.annotation.RestControllerAdvice;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Map;\rimport java.util.stream.Collectors;\r/*create a rest controller advice GlobalExceptionHandler*/\r@RestControllerAdvice\rpublic class GlobalExceptionHandler {\r//create exception handler handleValidationErrors to handle validation errors\r// get all the errors from exception\r// get the errors and add them to the map\r// create a new response entity\r// return the response entity\r@ExceptionHandler(MethodArgumentNotValidException.class)\rpublic ResponseEntity\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; handleValidationErrors(MethodArgumentNotValidException ex) {\rMap\u0026lt;String, String\u0026gt; errors = new HashMap\u0026lt;\u0026gt;();\rList\u0026lt;FieldError\u0026gt; fieldErrors = ex.getBindingResult().getFieldErrors();\rfieldErrors.forEach(error -\u0026gt; errors.put(error.getField(), error.getDefaultMessage()));\rreturn new ResponseEntity\u0026lt;\u0026gt;(errors, HttpStatus.BAD_REQUEST);\r}\r} Build the FlightBooking service class that creates a new database transaction to save the passenger, reservation data into respective tables and also send an SNS notification to reservation-success topic. An email notification will be sent to the configured email address. This method will also check for seat availability before proceeding with the reservation and throw an business exception, if seats are not available. Mở FlightBooking.java dán đoạn code sau đây package com.airlines.catalog.service;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Flight;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport com.airlines.catalog.repository.FlightRepository;\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport org.springframework.stereotype.Service;\rimport org.springframework.transaction.annotation.Propagation;\rimport org.springframework.transaction.annotation.Transactional;\rimport software.amazon.awssdk.regions.Region;\rimport software.amazon.awssdk.services.sns.SnsClient;\rimport software.amazon.awssdk.services.sns.model.PublishRequest;\rimport software.amazon.awssdk.services.sns.model.PublishResponse;\r@Service\rpublic class FlightBooking {\r/* create a method send message with sns arn and AWS Region as input parameter*/\rpublic void sendMessage(String message, String arn, Region region) {\rSnsClient snsClient = SnsClient.builder()\r.region(region)\r.build();\rPublishRequest request = PublishRequest.builder()\r.message(message)\r.topicArn(arn)\r.build();\rPublishResponse result = snsClient.publish(request);\rSystem.out.println(result.messageId() + \u0026#34; Message sent. Status is \u0026#34; + result.sdkHttpResponse().statusCode());\rsnsClient.close();\r}\r/*Create reserveFlight method with passenger, reservation, passengerRepository,\rreservationRepository,flightresultsRepository, number of passengers as input parameters.\rMethod should return a Boolean output\rGet the flight details by calling findById method from FlightresultsRepository with\rflightId as input parameter\rif no result is null throw FlightNotFoundException\rIf number of seats is less than number of passengers throw RequestedSeatsNotAvailable exception with\rflightId as input parameter\rCall getseatAvailable from flight object to get the available seats\rIf seats available is less than number of passengers then return false\rIf seats available is greater than or equal to number of passengers then\rdecrease the seats available attribute in flight object by calling setseatAvailable method\rSave the passenger and get the passenger id\rupdate the reservation object with the passenger id\rsave the reservation details\rcall sendMessage by passing reservation json string as input parameter\rMethod should return True or False based on the result of save methods\rAll of the above steps should be done within a transaction.\r*/\r@Transactional(propagation = Propagation.REQUIRED)\rpublic Boolean reserveFlight(Passenger passenger, Reservation reservation,\rPassengerRepository passengerRepository, ReservationRepository reservationRepository, FlightRepository flightRepository,\rint numberOfPassengers, String topicArn, Region region) throws FlightNotFoundException, RequestedSeatsNotAvailable {\rFlight flight = flightRepository.findById(reservation.getFlightId());\rif (flight == null) {\rthrow new FlightNotFoundException(reservation.getFlightId());\r}\rif (flight.getSeatAvailable() \u0026lt; numberOfPassengers) {\rthrow new RequestedSeatsNotAvailable();\r}\rflight.setSeatAvailable(flight.getSeatAvailable() - numberOfPassengers);\rflightRepository.save(flight);\rPassenger passenger1 = passengerRepository.save(passenger);\rreservation.setPassengerId(passenger1.getPassengerId());\rreservationRepository.save(reservation);\rsendMessage(reservation.toString(), topicArn, region);\rreturn true;\r}\r} Tạo the book flight API Controller Mở FlightReservation.java dán đoạn code sau đây package com.airlines.catalog.controller;\rimport java.nio.channels.ScatteringByteChannel;\rimport java.util.List;\rimport com.airlines.catalog.dto.FlightDetails;\rimport com.airlines.catalog.exception.AuthenticationException;\rimport com.airlines.catalog.repository.AirportRepository;\rimport com.airlines.catalog.repository.FlightRepository;\rimport com.airlines.catalog.service.FlightDetailsService;\rimport com.auth0.jwt.JWT;\rimport com.auth0.jwt.JWTVerifier;\rimport com.auth0.jwt.algorithms.Algorithm;\rimport com.auth0.jwt.interfaces.DecodedJWT;\rimport org.springframework.beans.factory.annotation.Autowired;\rimport org.springframework.beans.factory.annotation.Value;\rimport org.springframework.http.HttpStatus;\rimport org.springframework.http.ResponseEntity;\rimport org.springframework.web.bind.annotation.GetMapping;\rimport org.springframework.web.bind.annotation.RequestHeader;\rimport org.springframework.web.bind.annotation.RequestParam;\rimport org.springframework.web.bind.annotation.RestController;\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport com.airlines.catalog.service.FlightBooking;\rimport com.airlines.catalog.dto.ReservationDetails;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.web.bind.annotation.*;\rimport software.amazon.awssdk.regions.Region;\rimport javax.validation.Valid;\r@RestController\rpublic class FlightReservation {\r@Autowired\rFlightRepository flightresultsRepository;\r@Autowired\rAirportRepository airportresultsRepository;\r@Autowired\rFlightDetailsService FlightDetailsService;\r@Autowired\rPassengerRepository passengerRepository;\r@Autowired\rReservationRepository reservationRepository;\r@Autowired\rFlightBooking flightBooking;\r@Value(\u0026#34;${cognito.userpool.id}\u0026#34;)\rprivate String cognitoUserPoolId;\r@Value(\u0026#34;${aws.region}\u0026#34;)\rprivate String awsRegion;\r@Value(\u0026#34;${sns.arn}\u0026#34;)\rprivate String snsTopicArn;\r/* Create a private method verifyToken to verify JWT token with input parameters as\rCognito user pool id, AWS region and token string. Function returns a Boolean.\rConstruct the Cognito well known url and then verify the token using RSA Algorithm.\rcatch all Exception throw new authenticationException.*/\rprivate Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException {\rtry {\rSystem.out.println(\u0026#34;token=\u0026#34; + token);\rString cognitoWellKnownUrl = \u0026#34;https://\u0026#34;+ cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;;\rAlgorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl));\rJWTVerifier verifier = JWT.require(algorithm).build();\rDecodedJWT decodedJWT = verifier.verify(token);\rreturn true;\r} catch (Exception e) {\rthrow new AuthenticationException(e);\r}\r}\r/* Create a rest controller getFlightDetails to get flight details with HTTP GET Method ,\r/flight path and request parameters as departure date, departure airport code and arrival airport code\rJWT Token in the Authorization Header.\rRest controller returns a ResponseEntity of string.\r*/\r@GetMapping(\u0026#34;/flight\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate,\r@RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode,\r@RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException {\r/* Call verifyToken method, catch authentication exception and return the responseEntity\rif token is valid and call the findFlights method in FlightDetailsService class\rwith input parameters departure date, departure airport code,\rarrival airport code, flightResultsRepository and airportResultsRepository.\rIf flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;.\rIf authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden\r*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\rList\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository);\rif (flights.size() \u0026gt; 0) {\rreturn new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK);\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK);\r}\r} else {\rreturn new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN);\r}\r} catch (AuthenticationException e) {\rreturn e.getResponseEntity();\r}\r}\r/* Create a rest controller bookFlight to get flight details with HTTP POST Method ,\r/reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string.\rAuthorization token is passed in the header of the request.\r*/\r@PostMapping(\u0026#34;/reserve\u0026#34;)\rpublic ResponseEntity\u0026lt;String\u0026gt; bookFlight(@RequestBody @Valid ReservationDetails reservationDetails,\r@RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization)\rthrows AuthenticationException, FlightNotFoundException, RequestedSeatsNotAvailable {\rResponseEntity\u0026lt;String\u0026gt; responseEntity = null;\r/*validate the token by calling verifyToken method in a try catch block.\rCatch authenticationExceptionHandler exception return the response entity object\rfrom the exception object*/\rtry {\rif (verifyToken(cognitoUserPoolId, awsRegion, authorization)) {\r/* create passenger object assign first name, last name and gender of passenger object from reservationDetails object */\rPassenger passenger = new Passenger();\rpassenger.setFirstName(reservationDetails.getFirstName());\rpassenger.setLastName(reservationDetails.getLastName());\rpassenger.setGender(reservationDetails.getGender());\r//Check the age from reservationDetails object and populate adult field\rif (reservationDetails.getAge() \u0026gt;= 18) {\rpassenger.setAdult(true);\r}\r/* create reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail,\rcontactNumber, reservationStatus, paymentStatus, paymentMode */\rReservation reservation = new Reservation();\rreservation.setFlightId(reservationDetails.getFlightId());\rreservation.setTravelClass(reservationDetails.getTravelClass());\rreservation.setTicketPrice(reservationDetails.getTicketPrice());\rreservation.setCurrencyCode(reservationDetails.getCurrencyCode());\rreservation.setContactEmail(reservationDetails.getContactEmail());\rreservation.setContactNumber(reservationDetails.getContactNumber());\rreservation.setReservationStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentStatus(\u0026#34;Pending\u0026#34;);\rreservation.setPaymentMode(\u0026#34;Cash\u0026#34;);\r/* set the date reservation date in yyyy-MM-dd format and\rreservation time in HH:mm:ss format for current date and time*/\rreservation.setReservationDate(java.time.LocalDate.now().toString());\rreservation.setReservationTime(java.time.LocalTime.now().toString());\rBoolean result;\rtry {\rint noOfPassengers = 1;\rRegion region = Region.of(awsRegion);\rresult = flightBooking.reserveFlight(passenger, reservation, passengerRepository,\rreservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region);\r}\rcatch (FlightNotFoundException e) {\rreturn e.getResponseEntity();\r}\rcatch (RequestedSeatsNotAvailable e) {\rreturn e.getResponseEntity();\r}\r/* check if the reservation is successful\rreturn response entity object with HTTP status of ok and\rmessage \u0026#34;reservation made successfully\u0026#34; appending the booking Reference\rif the reservation is not successful\rreturn response entity object with HTTP status of bad request */\rif (result) {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation made successfully. Booking Reference: \u0026#34; + reservation.getBookingReference(), HttpStatus.OK);\r}\relse {\rresponseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation failed\u0026#34;, HttpStatus.BAD_REQUEST);\r}\r}\r} catch (AuthenticationException e) {\rresponseEntity = e.getResponseEntity();\r}\rreturn responseEntity;\r}\r} "
},
{
	"uri": "//localhost:1313/vi/8-api/8.2-apireserve/",
	"title": "API đặt vé",
	"tags": [],
	"description": "",
	"content": "Biểu đồ API Nội dung: Viết API Kiểm thử API "
},
{
	"uri": "//localhost:1313/vi/2-cloudformation/",
	"title": "CloudFormation",
	"tags": [],
	"description": "",
	"content": "Cloudformation Tải format Cloudformation cfn-basic-setup.yaml từ địa chỉ sau. Cloudformation này sẽ cài đặt tất cả kiến trúc mà chúng ta cần cho workshop này DownLoad here\nFocus how infras of file .yaml\nỞ console, tìm kiếm Cloudformation và chọn dịch vụ Cloudformation\n4. Các region khác sẽ không khả khi khi ta tạo các tài nguyên của ta trong cloudformation, vì vậy đầu tiên chúng ta thay đổi region sang us-east-1\n5. Sau đó click Create stack.\n6. Click chọn file cfn-basic-setup.yaml mà chúng ta đã tải. rồi click Next\nĐiền đầy đủ thông tin name, và các cài đặt khác sẽ để mặc định Next Tích chọn Acknowledge all the options và click Submit Bạn sẽ chuyển sang màn khác, và chờ một thời gian khoảng 10 phút để hoàn thành quá trình tạo Màn hình sau khi đã khởi tạo thành công "
},
{
	"uri": "//localhost:1313/vi/6-configdb/6.2-dbreserve/",
	"title": "DB Reserve",
	"tags": [],
	"description": "",
	"content": "Thiết kế Database Passenger table - to hold pasenger\u0026rsquo;s personal information Reservation table - to hold the flight reservations detail Tạo bảng và dữ liệu Tạo bảng cho API đặt chuyến bay CREATE TABLE passenger (\rpassenger_id INT NOT NULL AUTO_INCREMENT,\radult BOOLEAN NOT NULL,\rgender VARCHAR(10) NOT NULL,\rfirst_name VARCHAR(50) NOT NULL,\rlast_name VARCHAR(50) NOT NULL,\rPRIMARY KEY (passenger_id)\r);\rCREATE TABLE reservation (\rbooking_reference BIGINT NOT NULL AUTO_INCREMENT,\rpassenger_id INT NOT NULL,\rflight_id INT NOT NULL,\rreservation_date DATE NOT NULL,\rreservation_time TIME NOT NULL,\rreservation_status VARCHAR(20) NOT NULL,\rtravel_class VARCHAR(20) NOT NULL,\rticket_price DECIMAL(10,2) NOT NULL,\rcurrency_code VARCHAR(3) NOT NULL,\rpayment_status VARCHAR(20) NOT NULL,\rpayment_mode VARCHAR(20) NOT NULL,\rcontact_number VARCHAR(20) NOT NULL,\rcontact_email VARCHAR(50) NOT NULL,\rPRIMARY KEY (booking_reference),\rFOREIGN KEY (passenger_id) REFERENCES passenger(passenger_id),\rFOREIGN KEY (flight_id) REFERENCES flight(id)\r); Dán câu SQL và thực thi nó, sau đó quan sát kết quả. "
},
{
	"uri": "//localhost:1313/vi/6-configdb/6.1-dbfindflight/",
	"title": "DB tìm chuyến bay",
	"tags": [],
	"description": "",
	"content": "Thiết kế Database Bảng Airport - lưu thông tin của sân bay với airport code là primary key và liên kết các thông tin kahcs của airport. Bảng Flight - Lưu thông tin các chuyến bay với lịch, chỗ ngồi tối đa, chỗ ngồi còn trống Tạo bảng và dữ liệu Ta tạo bảng bằng chạy câu lệnh SQL dưới đây trong MySQL Workbench để tải dữ liệu cho 2 bảng USE FlightReservationDB;\rCREATE TABLE airport(\rairport_code VARCHAR(10) PRIMARY KEY,\rairport_name VARCHAR(50),\rairport_city VARCHAR(50),\rairport_locale VARCHAR(50)\r);\rCREATE TABLE flight (\rid INT PRIMARY KEY,\rdeparture_date DATE,\rdeparture_time TIME,\rdeparture_airport_code VARCHAR(3),\rarrival_date DATE,\rarrival_time TIME,\rarrival_airport_code VARCHAR(3),\rflight_number VARCHAR(10),\rflight_duration INT,\rticket_price DOUBLE,\rticket_currency VARCHAR(3),\rseat_capacity INT,\rseat_available INT,\rCONSTRAINT fk_departure_airport_code FOREIGN KEY (departure_airport_code) REFERENCES airport(airport_code),\rCONSTRAINT fk_arrival_airport_code FOREIGN KEY (arrival_airport_code) REFERENCES airport(airport_code)\r); Dán câu lệnh SQL vào MySQL Workbench. Thực thi câu lệnh SQL để tạo 2 bảng và quan sát kết quả. Chúng ta làm tương tự với câu SQL bên dưới để tải dữ liệu vào trong 2 bảng mà đã tạo ở bước trước insert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;LHR\u0026#39;, \u0026#39;London Heathrow Airport\u0026#39;, \u0026#39;London\u0026#39;, \u0026#39;UK\u0026#39;);\rinsert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;CDG\u0026#39;, \u0026#39;Charles De Gaulle Airport\u0026#39;, \u0026#39;Paris\u0026#39;, \u0026#39;France\u0026#39;);\rinsert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;LAX\u0026#39;, \u0026#39;Los Angeles International Airport\u0026#39;, \u0026#39;Los Angeles\u0026#39;, \u0026#39;USA\u0026#39;);\rinsert into airport(airport_code, airport_name, airport_city, airport_locale) VALUES(\u0026#39;MIA\u0026#39;, \u0026#39;Miami International Airport\u0026#39;, \u0026#39;Miami\u0026#39;, \u0026#39;USA\u0026#39;);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(1, \u0026#39;2023-08-01\u0026#39;, \u0026#39;10:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;14:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;MIA-LAX-001\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(2, \u0026#39;2023-08-01\u0026#39;, \u0026#39;14:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;14:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;MIA-LAX-002\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(3, \u0026#39;2023-08-01\u0026#39;, \u0026#39;15:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;LHR-CDG-001\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(4, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;LHR-CDG-002\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100);\rinsert into flight(id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available)\rVALUES(5, \u0026#39;2023-08-02\u0026#39;, \u0026#39;16:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-02\u0026#39;, \u0026#39;16:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;LHR-CDG-003\u0026#39;, \u0026#39;01:00\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;USD\u0026#39;, 100, 100); Chạy câu lệnh và quan sát kết quả 5. Kiểm tra một bảng và dữ liệu của nó. "
},
{
	"uri": "//localhost:1313/vi/8-api/8.1-apifindflight/8.1.2-testapi/",
	"title": "Kiểm thử API",
	"tags": [],
	"description": "",
	"content": " Sau khi viểt API, hãy kiểm thử nó. Đầu tiên tìm file FlightBookingApplication.java bằng đường dẫn src/main/java/com/airlines/catalog/ để mở nó Click vào nút Chọn Run \u0026lsquo;FlightBookingMain\u0026rsquo; Chờ vài giây để hoàn thành khởi động ứng dụng Mở PostMan để kiểm thử API Đầu vào là URL, dán CURL dưới đây đã được chuẩn bị từ trước để tiết kiệm thời gian của bạn. Nó gồm đầu vào của thâm số cho việc gọi API Đây là CURL curl --location \u0026#39;localhost:8090/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=LHR\u0026amp;arrivalAirportCode=CDG\u0026#39; \\\r--header \u0026#39;Authorization: eyJraWQiOiJLQzh0Zzd0VHcraDJoVXAzeHFUNmJybHV6SUloT2JNZWtoZmc5MVNPd2swPSIsImFsZyI6IlJTMjU2In0.eyJhdF9oYXNoIjoiWUpzYVFjaDNlbGt1R2Y3bW9BT0RtUSIsInN1YiI6ImM1OTVhNDEzLTk5NmQtNGFkNi1hNTFiLTVhNTk3ZjE4MTM0YSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9QTU9zUlBLM1kiLCJjb2duaXRvOnVzZXJuYW1lIjoibGVkYWNkZXB0cmFpIiwiYXVkIjoiNGk3aWJvYzI0aWpxYnNxNTI5ZmI3cG5kOGwiLCJldmVudF9pZCI6IjI4OTVlNWJjLTE4MWYtNDIyOS1hNGFjLTA3MWE3MWJmYjQxNiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNzExNzM5MzA3LCJuYW1lIjoibGUgZHVjIGFuaCIsImV4cCI6MTcxMTc0MjkwNywiaWF0IjoxNzExNzM5MzA3LCJqdGkiOiJkOTgzMzMyNC1mOGJlLTRiZGYtODM5MC1mMThkYmMwZTI3MmEiLCJlbWFpbCI6ImxlZGFjZGVwdHJhaUBnbWFpbC5jb20ifQ.E478H8NzHp1a2nt5MmrF8Qe52grqJ8wUk-55INdlaiT2arQQe8Aj1JeIbt8QSs14KTF5iD4EEoLMkkoqDi4JvCG7IU8BYCb-ygEEd6IazVanqO7acduh8xfWSosY3RCrt3xZSdDUHHXLicCBo8yz0Z1TqAWPfxgN1CV46ErRh_zF05HJ1c77ybqUyR5FVyJEGQDs9XkX0MR9ol6rJTWylK2e448MbsHtQ17xfDvOmS_RSUrN4r7zHVmxK2p_23EQ9C54gTs-GXz478JT9T_uR1JXONmtaLZEi7-lfrpB2mkmLd9MQ5dgJfKFd59fd4bV0IKB3G6t2d0ZMnowjitttw\u0026#39; Màn hình sẽ như sau Click vào Headers, quan sát key Authorization là token giống như một phần của curl mà tôi đã nhắc tới trước đó. Nó là JWT token đã hết hạn, Giờ bạn phải lấy JWT token mới. Trở lại Amazon Cognito chọn mục User pools và click TwoAuthen-UserPool\nClick App integration Cuộn xuống dưới App client and analysts chọn App client Trong mục Hosted UI, click View Hosted UI Bạn sẽ sang trong tab đăng nhập mới, Điền thông tin tài khoản đã tạo từ trước đó rồi click Sign in Sao chép URL vào Notedpad Cắt id_token Sao chép id_token. Token có hiệu lực trong 1 tiếng, Nếu nó hết hạn, thì bạn có thể lấy lại nó bằng các quay lại thực thi lại như các bước bên trên Dán nó vào giá trị của Authorization Giờ bạn đã có đầy đủ thông tin cần cho API click Send quan sát kết quả đầu ra Đây là thông tin của chuyến bay. Bạn đã gọi thanh công API tìm chyến bay. "
},
{
	"uri": "//localhost:1313/vi/8-api/8.2-apireserve/8.2.2-testapi/",
	"title": "Kiểm thử API",
	"tags": [],
	"description": "",
	"content": " Sau khi hoàn thành API, click return button. Thời gian chạy khoảng vài giây Sao chép curl đã chuẩn bị dưới đây curl --location \u0026#39;localhost:8090/reserve\u0026#39; \\\r--header \u0026#39;Authorization: eyJraWQiOiJLQzh0Zzd0VHcraDJoVXAzeHFUNmJybHV6SUloT2JNZWtoZmc5MVNPd2swPSIsImFsZyI6IlJTMjU2In0.eyJhdF9oYXNoIjoiYXUzNFdHZm5GeUs0YVdpa1gxa2lkdyIsInN1YiI6ImM1OTVhNDEzLTk5NmQtNGFkNi1hNTFiLTVhNTk3ZjE4MTM0YSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9QTU9zUlBLM1kiLCJjb2duaXRvOnVzZXJuYW1lIjoibGVkYWNkZXB0cmFpIiwiYXVkIjoiNGk3aWJvYzI0aWpxYnNxNTI5ZmI3cG5kOGwiLCJldmVudF9pZCI6IjE4YmUyMmM2LTdkZjUtNDg1Ny04YmE5LTkyZjQwNzhkZWZmZSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNzExNzQ0NDAwLCJuYW1lIjoibGUgZHVjIGFuaCIsImV4cCI6MTcxMTc0ODAwMCwiaWF0IjoxNzExNzQ0NDAwLCJqdGkiOiI1NDhjZjlmZS03ZTc5LTQ4ZWUtYjJlZi1kNjVjZjM1MzU0NjEiLCJlbWFpbCI6ImxlZGFjZGVwdHJhaUBnbWFpbC5jb20ifQ.G3cTAq-4zaDGoOXm8PeScb1hsKWZrSJwRaHolbhCIynuyLwqvyDxijsvSTQgeRYbzn4ZPqMt1RJ22XjvA4n7gTrFKAmcudhM7XndGVsJadZ2ks29VvnIJQXmxu7a66R5GTCucgibbkNBAPI9vUOZl5-QuF6UopBDflCFKtQPlwTW5rtR8bhGMVnEZlTundBLwg3wZcNve4ChyIePMGtOURCW7aSsIh3VGU7whFVK3jAR-I_zm4FtQIwBI0grgEjxxizr5u-3HD4o30uT5X_dZQmguyYi9Rhiq_uAL6Be1RmmYl74KYCDZsKmZdLIIVDIM5LvGbxXt8zpvuo9JosiCA\u0026#39; \\\r--header \u0026#39;Content-Type: application/json\u0026#39; \\\r--data-raw \u0026#39;{\r\u0026#34;flightId\u0026#34;: 1,\r\u0026#34;travelClass\u0026#34;: \u0026#34;Economy\u0026#34;,\r\u0026#34;ticketPrice\u0026#34;: 1000,\r\u0026#34;currencyCode\u0026#34;: \u0026#34;USD\u0026#34;,\r\u0026#34;paymentMode\u0026#34;: \u0026#34;Credit Card\u0026#34;,\r\u0026#34;contactNumber\u0026#34;: \u0026#34;+123456789012\u0026#34;,\r\u0026#34;contactEmail\u0026#34;: \u0026#34;ledacdeptrai@gmail.com\u0026#34;,\r\u0026#34;reservationStatus\u0026#34;: \u0026#34;Confirmed\u0026#34;,\r\u0026#34;reservationDate\u0026#34;: \u0026#34;2022-01-01\u0026#34;,\r\u0026#34;reservationTime\u0026#34;: \u0026#34;12:00:00\u0026#34;,\r\u0026#34;paymentStatus\u0026#34;: \u0026#34;Paid\u0026#34;,\r\u0026#34;passengerId\u0026#34;: 1,\r\u0026#34;lastName\u0026#34;: \u0026#34;Last Name is required\u0026#34;,\r\u0026#34;firstName\u0026#34;: \u0026#34;First Name is required\u0026#34;,\r\u0026#34;age\u0026#34;: \u0026#34;30\u0026#34;,\r\u0026#34;gender\u0026#34;:\u0026#34;Male\u0026#34;\r}\u0026#39; Từ URL, dán curl 3. Trong mục Headers, thay thế Authorization giống [Testing Find Flight API] 4. Click send và quan sát kết quả 5. Kiểm tra email bạn sử dụng để tạo tài khoản, bạn sẽ nhận được email giống như hình ảnh dưới đây "
},
{
	"uri": "//localhost:1313/vi/3-connectec2/",
	"title": "Kết nối tới EC2",
	"tags": [],
	"description": "",
	"content": "Preparation steps Tiếp theo chúng ta sẽ cài đặt EC2 để kết nối bằng RDP từ máy tính của chúng ta\nTừ console, chọn dịch vụ EC2. Click vào instances running. Chọn instance hiện trên màn hình Click vào security, và sau đó click vào Security group để cài đặt RDP. Chọn inbound rules sau đó Edit bound rules. Thêm rule Trong Type chọn RDP và Source chọn My IP và Save rules. Trở lại nơi giống như tiêu đề, và click Connect Click vào RDP client và tài remote desktop file. 10. Mở file vừa mới download .\nChọn Connect và Next trong màn hình hiển thị để kết nối tới EC2, cho đến khi bạn nhập mật khẩu. Khi đó bạn cần vào dịch vụ Secret manager nơi lưu các bảo mật thông tin quan trọng như mật khẩu, API key, DB credentials và bạn sẽ tới đó để lấy mật khẩu của user ADmin để kết nối tới EC2 Từ home console chọn AWS Secretes Manager sau đó chọn Secretes Nó sẽ tới được màn hình giống như hình ảnh bên dưới. Chọn EC2instancesSecret . 13. Tìm mục Secret value và chọn Retrieve secret value. 14. Sao chép pass_word, đó là mật khẩu của tài khoản admin để kết nối tới EC2\n15. Đăng nhập tới Ec2 bằng cách dùng Administrator như username. Nhập mật khẩu mà ta đã lấy được từ bước trước\n16. Bạn đã đăng nhập thành công, bạn sẽ sử dụng nó trong các bước tiếp theo. "
},
{
	"uri": "//localhost:1313/vi/4-cognito/",
	"title": "Cài đặt Cognito",
	"tags": [],
	"description": "",
	"content": "Cài đặt Cognito In this step, we will set Cognito for creating user,password. Using it to authenticate to connect application that like enterprise application.\nTừ màn hình chính, chọn Cognito Click vào User pool và chọn user pool có tên là TwoAuthen-UserPool. Chọn App integration Cuộn xuống bên dưới và chọn UserPoolClient Bên trong mục Hosted UI, chọn vào View Hosted UI Bạn sẽ di chuyển tới tab mới . Đây là lần đầu chúng ta tới đây vì vậy đầu tiên chúng ta phải Sign up. Điền thông tin để tạo user Một email được gửi tới, hoàn thành để tạo tài khoản thành công Điền code bạn nhận được và click Confirm account. Giờ chúng ta sẽ chuyển hướng tới localhost:8080 . Bỏ qua lỗi bởi trang web, Ta sẽ trở lại đây và một lúc nữa để lấy được token từ link URL cho mục đích kiểm thử API "
},
{
	"uri": "//localhost:1313/vi/5-sns/",
	"title": "Simple Notification Service",
	"tags": [],
	"description": "",
	"content": "Ở bước này, chúng ta sẽ thảo luận làm thế nào để tạo đăng kí, ta sẽ sử dụng nó để xác nhận việc gọi API thành công\nTừ console, chọn Simple Notification Service Chọn mục Topics Bạn có 1 topic đã tạo từ Cloudformation, sau đó click tới topic Trong topic reservation-success , click Create subcription Chọn protocol Email, Endpoint là email mà mình muốn nhận thông báo. Sau đó click Create subscription. Kiểm tra email rồi click Confirm subscription Bạn sẽ tới trang, sẽ thông báo cho bạn rằng subscription đã được xác nhận, bạn có thể unsubcribe Bạn đã cài đặt thành công SNS topic, nó sẽ nhận email để thông báo API của bạn đã được gọi thành công "
},
{
	"uri": "//localhost:1313/vi/6-configdb/",
	"title": "Cấu hình DB",
	"tags": [],
	"description": "",
	"content": "Trong hướng dẫn này, ta sẽ cấu hình MYSQL Workbench để kết nối tới máy chủ Database đã được tạo bưởi cloudformation. MySQL Workbench có thể quản lý database, truy vấn data ,..\nĐầu tiên, ta trở lại remote computer, Mở MySQL Workbench Ta sẽ di chuyển tới màn Trong mục Database , chọn Manage Connections Nhiều thông tin mà chúng ta phải điền, ta sẽ lấy nó ở Secretes manager. Chọn Secrete manager và chọn mục Secretes. Click RDSSecreteForApp Trong Secrete value, sau đó đi tới Retrieve secrete value. Vài thông tin mà chúng ta sẽ lấy từ đây. Trong remote computer, Click New và điền thông tin mà lấy từ bước trước. Các trường thông tin giống với thông tin trong Secret value của bước trước. Connection name, bạn có thể đặt tùy ý Hostname : host Username : username Password : password Sau đó click Store in Vault, điền thông tin và click Ok Test connection of database Tạo kết nối thành công tới máy chủ database Bước tiếp, ta sẽ tạo bảng và dữ liệu cho microservice. Trong mục Database chọn Connect to Database Click OK Bạn sẽ được chuyển tới màn khác. Bước tiếp theo ta sẽ thiết kế database và tạo data để phục vụ cho ứng dụng Content Design DB for API find flight Design DB for API reserve "
},
{
	"uri": "//localhost:1313/vi/7-configintel/",
	"title": "Intellij",
	"tags": [],
	"description": "",
	"content": "Trong bước này, sẽ thảo luận làm thế nào để cài đặt file application.properties của ứng dụng Java. Nó kết nối tới database, Amazon Cognito Service, Amazon Simpke Notification Service, để sử dụng để tạo ứng dụng.\nTrong remote computer, mở Intellij IDEA Mở file dự án đá được tạo trước đó. Tìm thư mục với đường dẫn :Airline-Booking-CodeWhisperer-PromptProject và mở nó. Kiến trúc của project đã được tạo để giúp bạn dễ dàng cho việc coding Giờ ta sẽ di chuyển sang Cloudformation để lấy vài giá trị của Cognito và SNS để cung cấp cho bên trong file application.properties trong project của ta để sử dụng được vài dihcj vụ của AWS. Đi tới Cloudformation, click Stacks và chọn Cloudformation từ kết quả tìm kiếm. Trong Outputs, chú ý 2 giá trị CognitoProviderName và SNSTopic, Chúng tương ứng là cognito.userpool.id và sns.arn. trong aplications.properties Đây là file application.properties , bạn cần thay thế một vài giá trị spring.jpa.show-sql=true\rspring.jpa.hibernate.ddl-auto=none\rspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\rspring.datasource.url=cw-sample.c7aqu420y9mw.us-east-1.rds.amazonaws.com\rspring.datasource.username=admin\rspring.datasource.password=MqzSH]1ce%\rspring.datasource.driver-class-name=com.mysql.jdbc.Driver\rserver.port = 8090\raws.region=us-east-1\rsecretmanager.key=RDSSecretForApp\rcognito.userpool.id=cognito-idp.us-east-1.amazonaws.com/us-east-1_PMOsRPK3Y\rsns.arn=arn:aws:sns:us-east-1:992382617520:reservation-success Lấy những thông tin và thay thế bởi 1, 2, 3: thông tin mà bạn kết nối tới MySQL Workbench, có thể lấy nó từ Secretes manager 4: region mà chúng ta chọn cho workshop 5: RDS key : xác thực của database 6, 7: Lấy nó từ bước trước "
},
{
	"uri": "//localhost:1313/vi/8-api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": "1. Find Flight API Chúng ta sẽ dựng một API để tìm chuyến bay dựa trên ngày đến và ngày đi. API sẽ trả về một danh sách các chuyến bay với chi tiết về chuyến bay, thông tin về chỗ ngồi, giá. API được bảo về bởi JWT token. Người dùng đăng nhập tới Cognito Hosted UI để lấy JWT token để gọi API. API được xác thực và sẽ được thực thi. 2. Reservation API Chúng ta dựng một API đặt chuyến bay, API sẽ lấy thông tin hành khách, chi tiết thông tin đặt chỗ và thông tin của chuyến bay làm đầu ra của API. Flight ID sẽ trả về từ API tìm chuyến bay sẽ cung cấp như một đầu vào của API. Gọi API sẽ được bảo về bởi JWT token. Lấy nó giống như chúng ta lấy nó khi gọi API tìm chuyến bay. Content: Find Flight API Reservation API "
},
{
	"uri": "//localhost:1313/vi/9-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Từ console, đi đến Cloudformation và xóa Stack, cần khoảng 30 phút để xóa các tài nguyên.\n"
},
{
	"uri": "//localhost:1313/vi/8-api/8.1-apifindflight/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]